{
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# I. Importing Relevant Packages"
      ],
      "metadata": {
        "id": "tf0UgyPnQZhO"
      },
      "id": "tf0UgyPnQZhO"
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "vsjye8eYA3hQ"
      },
      "outputs": [],
      "source": [
        "import matplotlib as mpl\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from matplotlib.ticker import MaxNLocator\n",
        "import random\n",
        "from collections import OrderedDict\n",
        "from tabulate import tabulate"
      ],
      "id": "vsjye8eYA3hQ"
    },
    {
      "cell_type": "markdown",
      "source": [
        "# II. Analysis of share of renewable energy in electricity generation in the United States"
      ],
      "metadata": {
        "id": "cNUIB_y1QoFR"
      },
      "id": "cNUIB_y1QoFR"
    },
    {
      "cell_type": "markdown",
      "source": [
        "II.a) Upload the Share of Electricity by Source csv file for all countries"
      ],
      "metadata": {
        "id": "PxdrsvcVRDo9"
      },
      "id": "PxdrsvcVRDo9"
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import files\n",
        " \n",
        " \n",
        "uploaded = files.upload()"
      ],
      "metadata": {
        "colab": {
          "resources": {
            "http://localhost:8080/nbextensions/google.colab/files.js": {
              "data": "Ly8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQwovLwovLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgovLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKLy8KLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKLy8KLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQovLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAovLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAovLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCi8qKgogKiBAZmlsZW92ZXJ2aWV3IEhlbHBlcnMgZm9yIGdvb2dsZS5jb2xhYiBQeXRob24gbW9kdWxlLgogKi8KKGZ1bmN0aW9uKHNjb3BlKSB7CmZ1bmN0aW9uIHNwYW4odGV4dCwgc3R5bGVBdHRyaWJ1dGVzID0ge30pIHsKICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0OwogIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHN0eWxlQXR0cmlidXRlcykpIHsKICAgIGVsZW1lbnQuc3R5bGVba2V5XSA9IHN0eWxlQXR0cmlidXRlc1trZXldOwogIH0KICByZXR1cm4gZWxlbWVudDsKfQoKLy8gTWF4IG51bWJlciBvZiBieXRlcyB3aGljaCB3aWxsIGJlIHVwbG9hZGVkIGF0IGEgdGltZS4KY29uc3QgTUFYX1BBWUxPQURfU0laRSA9IDEwMCAqIDEwMjQ7CgpmdW5jdGlvbiBfdXBsb2FkRmlsZXMoaW5wdXRJZCwgb3V0cHV0SWQpIHsKICBjb25zdCBzdGVwcyA9IHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCk7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICAvLyBDYWNoZSBzdGVwcyBvbiB0aGUgb3V0cHV0RWxlbWVudCB0byBtYWtlIGl0IGF2YWlsYWJsZSBmb3IgdGhlIG5leHQgY2FsbAogIC8vIHRvIHVwbG9hZEZpbGVzQ29udGludWUgZnJvbSBQeXRob24uCiAgb3V0cHV0RWxlbWVudC5zdGVwcyA9IHN0ZXBzOwoKICByZXR1cm4gX3VwbG9hZEZpbGVzQ29udGludWUob3V0cHV0SWQpOwp9CgovLyBUaGlzIGlzIHJvdWdobHkgYW4gYXN5bmMgZ2VuZXJhdG9yIChub3Qgc3VwcG9ydGVkIGluIHRoZSBicm93c2VyIHlldCksCi8vIHdoZXJlIHRoZXJlIGFyZSBtdWx0aXBsZSBhc3luY2hyb25vdXMgc3RlcHMgYW5kIHRoZSBQeXRob24gc2lkZSBpcyBnb2luZwovLyB0byBwb2xsIGZvciBjb21wbGV0aW9uIG9mIGVhY2ggc3RlcC4KLy8gVGhpcyB1c2VzIGEgUHJvbWlzZSB0byBibG9jayB0aGUgcHl0aG9uIHNpZGUgb24gY29tcGxldGlvbiBvZiBlYWNoIHN0ZXAsCi8vIHRoZW4gcGFzc2VzIHRoZSByZXN1bHQgb2YgdGhlIHByZXZpb3VzIHN0ZXAgYXMgdGhlIGlucHV0IHRvIHRoZSBuZXh0IHN0ZXAuCmZ1bmN0aW9uIF91cGxvYWRGaWxlc0NvbnRpbnVlKG91dHB1dElkKSB7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICBjb25zdCBzdGVwcyA9IG91dHB1dEVsZW1lbnQuc3RlcHM7CgogIGNvbnN0IG5leHQgPSBzdGVwcy5uZXh0KG91dHB1dEVsZW1lbnQubGFzdFByb21pc2VWYWx1ZSk7CiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXh0LnZhbHVlLnByb21pc2UpLnRoZW4oKHZhbHVlKSA9PiB7CiAgICAvLyBDYWNoZSB0aGUgbGFzdCBwcm9taXNlIHZhbHVlIHRvIG1ha2UgaXQgYXZhaWxhYmxlIHRvIHRoZSBuZXh0CiAgICAvLyBzdGVwIG9mIHRoZSBnZW5lcmF0b3IuCiAgICBvdXRwdXRFbGVtZW50Lmxhc3RQcm9taXNlVmFsdWUgPSB2YWx1ZTsKICAgIHJldHVybiBuZXh0LnZhbHVlLnJlc3BvbnNlOwogIH0pOwp9CgovKioKICogR2VuZXJhdG9yIGZ1bmN0aW9uIHdoaWNoIGlzIGNhbGxlZCBiZXR3ZWVuIGVhY2ggYXN5bmMgc3RlcCBvZiB0aGUgdXBsb2FkCiAqIHByb2Nlc3MuCiAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dElkIEVsZW1lbnQgSUQgb2YgdGhlIGlucHV0IGZpbGUgcGlja2VyIGVsZW1lbnQuCiAqIEBwYXJhbSB7c3RyaW5nfSBvdXRwdXRJZCBFbGVtZW50IElEIG9mIHRoZSBvdXRwdXQgZGlzcGxheS4KICogQHJldHVybiB7IUl0ZXJhYmxlPCFPYmplY3Q+fSBJdGVyYWJsZSBvZiBuZXh0IHN0ZXBzLgogKi8KZnVuY3Rpb24qIHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCkgewogIGNvbnN0IGlucHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlucHV0SWQpOwogIGlucHV0RWxlbWVudC5kaXNhYmxlZCA9IGZhbHNlOwoKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIG91dHB1dEVsZW1lbnQuaW5uZXJIVE1MID0gJyc7CgogIGNvbnN0IHBpY2tlZFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgaW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlKSA9PiB7CiAgICAgIHJlc29sdmUoZS50YXJnZXQuZmlsZXMpOwogICAgfSk7CiAgfSk7CgogIGNvbnN0IGNhbmNlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpOwogIGlucHV0RWxlbWVudC5wYXJlbnRFbGVtZW50LmFwcGVuZENoaWxkKGNhbmNlbCk7CiAgY2FuY2VsLnRleHRDb250ZW50ID0gJ0NhbmNlbCB1cGxvYWQnOwogIGNvbnN0IGNhbmNlbFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgY2FuY2VsLm9uY2xpY2sgPSAoKSA9PiB7CiAgICAgIHJlc29sdmUobnVsbCk7CiAgICB9OwogIH0pOwoKICAvLyBXYWl0IGZvciB0aGUgdXNlciB0byBwaWNrIHRoZSBmaWxlcy4KICBjb25zdCBmaWxlcyA9IHlpZWxkIHsKICAgIHByb21pc2U6IFByb21pc2UucmFjZShbcGlja2VkUHJvbWlzZSwgY2FuY2VsUHJvbWlzZV0pLAogICAgcmVzcG9uc2U6IHsKICAgICAgYWN0aW9uOiAnc3RhcnRpbmcnLAogICAgfQogIH07CgogIGNhbmNlbC5yZW1vdmUoKTsKCiAgLy8gRGlzYWJsZSB0aGUgaW5wdXQgZWxlbWVudCBzaW5jZSBmdXJ0aGVyIHBpY2tzIGFyZSBub3QgYWxsb3dlZC4KICBpbnB1dEVsZW1lbnQuZGlzYWJsZWQgPSB0cnVlOwoKICBpZiAoIWZpbGVzKSB7CiAgICByZXR1cm4gewogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbXBsZXRlJywKICAgICAgfQogICAgfTsKICB9CgogIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykgewogICAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpOwogICAgbGkuYXBwZW5kKHNwYW4oZmlsZS5uYW1lLCB7Zm9udFdlaWdodDogJ2JvbGQnfSkpOwogICAgbGkuYXBwZW5kKHNwYW4oCiAgICAgICAgYCgke2ZpbGUudHlwZSB8fCAnbi9hJ30pIC0gJHtmaWxlLnNpemV9IGJ5dGVzLCBgICsKICAgICAgICBgbGFzdCBtb2RpZmllZDogJHsKICAgICAgICAgICAgZmlsZS5sYXN0TW9kaWZpZWREYXRlID8gZmlsZS5sYXN0TW9kaWZpZWREYXRlLnRvTG9jYWxlRGF0ZVN0cmluZygpIDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ24vYSd9IC0gYCkpOwogICAgY29uc3QgcGVyY2VudCA9IHNwYW4oJzAlIGRvbmUnKTsKICAgIGxpLmFwcGVuZENoaWxkKHBlcmNlbnQpOwoKICAgIG91dHB1dEVsZW1lbnQuYXBwZW5kQ2hpbGQobGkpOwoKICAgIGNvbnN0IGZpbGVEYXRhUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7CiAgICAgIHJlYWRlci5vbmxvYWQgPSAoZSkgPT4gewogICAgICAgIHJlc29sdmUoZS50YXJnZXQucmVzdWx0KTsKICAgICAgfTsKICAgICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGZpbGUpOwogICAgfSk7CiAgICAvLyBXYWl0IGZvciB0aGUgZGF0YSB0byBiZSByZWFkeS4KICAgIGxldCBmaWxlRGF0YSA9IHlpZWxkIHsKICAgICAgcHJvbWlzZTogZmlsZURhdGFQcm9taXNlLAogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbnRpbnVlJywKICAgICAgfQogICAgfTsKCiAgICAvLyBVc2UgYSBjaHVua2VkIHNlbmRpbmcgdG8gYXZvaWQgbWVzc2FnZSBzaXplIGxpbWl0cy4gU2VlIGIvNjIxMTU2NjAuCiAgICBsZXQgcG9zaXRpb24gPSAwOwogICAgZG8gewogICAgICBjb25zdCBsZW5ndGggPSBNYXRoLm1pbihmaWxlRGF0YS5ieXRlTGVuZ3RoIC0gcG9zaXRpb24sIE1BWF9QQVlMT0FEX1NJWkUpOwogICAgICBjb25zdCBjaHVuayA9IG5ldyBVaW50OEFycmF5KGZpbGVEYXRhLCBwb3NpdGlvbiwgbGVuZ3RoKTsKICAgICAgcG9zaXRpb24gKz0gbGVuZ3RoOwoKICAgICAgY29uc3QgYmFzZTY0ID0gYnRvYShTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGNodW5rKSk7CiAgICAgIHlpZWxkIHsKICAgICAgICByZXNwb25zZTogewogICAgICAgICAgYWN0aW9uOiAnYXBwZW5kJywKICAgICAgICAgIGZpbGU6IGZpbGUubmFtZSwKICAgICAgICAgIGRhdGE6IGJhc2U2NCwKICAgICAgICB9LAogICAgICB9OwoKICAgICAgbGV0IHBlcmNlbnREb25lID0gZmlsZURhdGEuYnl0ZUxlbmd0aCA9PT0gMCA/CiAgICAgICAgICAxMDAgOgogICAgICAgICAgTWF0aC5yb3VuZCgocG9zaXRpb24gLyBmaWxlRGF0YS5ieXRlTGVuZ3RoKSAqIDEwMCk7CiAgICAgIHBlcmNlbnQudGV4dENvbnRlbnQgPSBgJHtwZXJjZW50RG9uZX0lIGRvbmVgOwoKICAgIH0gd2hpbGUgKHBvc2l0aW9uIDwgZmlsZURhdGEuYnl0ZUxlbmd0aCk7CiAgfQoKICAvLyBBbGwgZG9uZS4KICB5aWVsZCB7CiAgICByZXNwb25zZTogewogICAgICBhY3Rpb246ICdjb21wbGV0ZScsCiAgICB9CiAgfTsKfQoKc2NvcGUuZ29vZ2xlID0gc2NvcGUuZ29vZ2xlIHx8IHt9OwpzY29wZS5nb29nbGUuY29sYWIgPSBzY29wZS5nb29nbGUuY29sYWIgfHwge307CnNjb3BlLmdvb2dsZS5jb2xhYi5fZmlsZXMgPSB7CiAgX3VwbG9hZEZpbGVzLAogIF91cGxvYWRGaWxlc0NvbnRpbnVlLAp9Owp9KShzZWxmKTsK",
              "ok": true,
              "headers": [
                [
                  "content-type",
                  "application/javascript"
                ]
              ],
              "status": 200,
              "status_text": ""
            }
          },
          "base_uri": "https://localhost:8080/",
          "height": 74
        },
        "id": "99kn84fGHL6a",
        "outputId": "6df69e24-78e1-4fd7-b115-47c78a83f41b"
      },
      "id": "99kn84fGHL6a",
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-78261c57-4e10-4db1-9f7f-7cd69117edae\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-78261c57-4e10-4db1-9f7f-7cd69117edae\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script src=\"/nbextensions/google.colab/files.js\"></script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving share-elec-by-source.csv to share-elec-by-source.csv\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "II.2) Filter out for data between 1998 and 2018 for all countries"
      ],
      "metadata": {
        "id": "aI9Z5t2gRRhf"
      },
      "id": "aI9Z5t2gRRhf"
    },
    {
      "cell_type": "code",
      "source": [
        "import io\n",
        " \n",
        "clean_elec_df = pd.read_csv(io.BytesIO(uploaded['share-elec-by-source.csv']), dtype={'Year' : np.int32})\n",
        "clean_elec_df.drop(clean_elec_df[clean_elec_df.Year < 1998].index, inplace = True)\n",
        "clean_elec_df.drop(clean_elec_df[clean_elec_df.Year > 2018].index, inplace = True)\n",
        "clean_elec_df.head()"
      ],
      "metadata": {
        "id": "JHh7TivjHV8b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 267
        },
        "outputId": "9567c506-af31-4a5f-c334-2a3db41402cd"
      },
      "id": "JHh7TivjHV8b",
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        Entity Code  Year  Coal (% electricity)  Gas (% electricity)  \\\n",
              "0  Afghanistan  AFG  2000                   0.0               33.191   \n",
              "1  Afghanistan  AFG  2001                   0.0               15.878   \n",
              "2  Afghanistan  AFG  2002                   0.0               19.214   \n",
              "3  Afghanistan  AFG  2003                   0.0               32.907   \n",
              "4  Afghanistan  AFG  2004                   0.0               36.801   \n",
              "\n",
              "   Hydro (% electricity)  Solar (% electricity)  Wind (% electricity)  \\\n",
              "0                 66.809                    0.0                   0.0   \n",
              "1                 84.122                    0.0                   0.0   \n",
              "2                 80.786                    0.0                   0.0   \n",
              "3                 67.093                    0.0                   0.0   \n",
              "4                 63.199                    0.0                   0.0   \n",
              "\n",
              "   Oil (% electricity)  Nuclear (% electricity)  \\\n",
              "0                  0.0                      0.0   \n",
              "1                  0.0                      0.0   \n",
              "2                  0.0                      0.0   \n",
              "3                  0.0                      0.0   \n",
              "4                  0.0                      0.0   \n",
              "\n",
              "   Other renewables including bioenergy (% electricity)  \n",
              "0                                                0.0     \n",
              "1                                                0.0     \n",
              "2                                                0.0     \n",
              "3                                                0.0     \n",
              "4                                                0.0     "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-078416b7-0794-476d-bf2c-98dd65c90d9f\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Entity</th>\n",
              "      <th>Code</th>\n",
              "      <th>Year</th>\n",
              "      <th>Coal (% electricity)</th>\n",
              "      <th>Gas (% electricity)</th>\n",
              "      <th>Hydro (% electricity)</th>\n",
              "      <th>Solar (% electricity)</th>\n",
              "      <th>Wind (% electricity)</th>\n",
              "      <th>Oil (% electricity)</th>\n",
              "      <th>Nuclear (% electricity)</th>\n",
              "      <th>Other renewables including bioenergy (% electricity)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>AFG</td>\n",
              "      <td>2000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>33.191</td>\n",
              "      <td>66.809</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>AFG</td>\n",
              "      <td>2001</td>\n",
              "      <td>0.0</td>\n",
              "      <td>15.878</td>\n",
              "      <td>84.122</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>AFG</td>\n",
              "      <td>2002</td>\n",
              "      <td>0.0</td>\n",
              "      <td>19.214</td>\n",
              "      <td>80.786</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>AFG</td>\n",
              "      <td>2003</td>\n",
              "      <td>0.0</td>\n",
              "      <td>32.907</td>\n",
              "      <td>67.093</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>AFG</td>\n",
              "      <td>2004</td>\n",
              "      <td>0.0</td>\n",
              "      <td>36.801</td>\n",
              "      <td>63.199</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-078416b7-0794-476d-bf2c-98dd65c90d9f')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-078416b7-0794-476d-bf2c-98dd65c90d9f button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-078416b7-0794-476d-bf2c-98dd65c90d9f');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "II.3) Filter out for USA only data in this time period"
      ],
      "metadata": {
        "id": "GSZI6VtfRdYk"
      },
      "id": "GSZI6VtfRdYk"
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "id": "TQSh9Pg_A3hV"
      },
      "outputs": [],
      "source": [
        "us_elec_df = clean_elec_df[clean_elec_df['Code'] == 'USA'].copy()"
      ],
      "id": "TQSh9Pg_A3hV"
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "id": "bhJGv33kA3hV",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 354
        },
        "outputId": "ac16c827-3cba-446c-afc3-f20329275729"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "             Entity Code  Year  Coal (% electricity)  Gas (% electricity)  \\\n",
              "5557  United States  USA  1998                52.623               14.815   \n",
              "5558  United States  USA  1999                51.774               15.200   \n",
              "5559  United States  USA  2000                51.715               16.175   \n",
              "5560  United States  USA  2001                50.954               17.346   \n",
              "5561  United States  USA  2002                50.101               18.206   \n",
              "\n",
              "      Hydro (% electricity)  Solar (% electricity)  Wind (% electricity)  \\\n",
              "5557                  8.353                  0.014                 0.079   \n",
              "5558                  8.044                  0.013                 0.115   \n",
              "5559                  7.102                  0.013                 0.147   \n",
              "5560                  5.570                  0.015                 0.180   \n",
              "5561                  6.624                  0.014                 0.268   \n",
              "\n",
              "      Oil (% electricity)  Nuclear (% electricity)  \\\n",
              "5557                3.592                   18.392   \n",
              "5558                3.225                   19.476   \n",
              "5559                3.051                   19.828   \n",
              "5560                3.661                   20.575   \n",
              "5561                2.801                   20.217   \n",
              "\n",
              "      Other renewables including bioenergy (% electricity)  \n",
              "5557                                              1.702     \n",
              "5558                                              1.689     \n",
              "5559                                              1.968     \n",
              "5560                                              1.699     \n",
              "5561                                              1.768     "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1ca5e2a0-78c8-4f34-9994-5bef962bdb67\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Entity</th>\n",
              "      <th>Code</th>\n",
              "      <th>Year</th>\n",
              "      <th>Coal (% electricity)</th>\n",
              "      <th>Gas (% electricity)</th>\n",
              "      <th>Hydro (% electricity)</th>\n",
              "      <th>Solar (% electricity)</th>\n",
              "      <th>Wind (% electricity)</th>\n",
              "      <th>Oil (% electricity)</th>\n",
              "      <th>Nuclear (% electricity)</th>\n",
              "      <th>Other renewables including bioenergy (% electricity)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>5557</th>\n",
              "      <td>United States</td>\n",
              "      <td>USA</td>\n",
              "      <td>1998</td>\n",
              "      <td>52.623</td>\n",
              "      <td>14.815</td>\n",
              "      <td>8.353</td>\n",
              "      <td>0.014</td>\n",
              "      <td>0.079</td>\n",
              "      <td>3.592</td>\n",
              "      <td>18.392</td>\n",
              "      <td>1.702</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5558</th>\n",
              "      <td>United States</td>\n",
              "      <td>USA</td>\n",
              "      <td>1999</td>\n",
              "      <td>51.774</td>\n",
              "      <td>15.200</td>\n",
              "      <td>8.044</td>\n",
              "      <td>0.013</td>\n",
              "      <td>0.115</td>\n",
              "      <td>3.225</td>\n",
              "      <td>19.476</td>\n",
              "      <td>1.689</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5559</th>\n",
              "      <td>United States</td>\n",
              "      <td>USA</td>\n",
              "      <td>2000</td>\n",
              "      <td>51.715</td>\n",
              "      <td>16.175</td>\n",
              "      <td>7.102</td>\n",
              "      <td>0.013</td>\n",
              "      <td>0.147</td>\n",
              "      <td>3.051</td>\n",
              "      <td>19.828</td>\n",
              "      <td>1.968</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5560</th>\n",
              "      <td>United States</td>\n",
              "      <td>USA</td>\n",
              "      <td>2001</td>\n",
              "      <td>50.954</td>\n",
              "      <td>17.346</td>\n",
              "      <td>5.570</td>\n",
              "      <td>0.015</td>\n",
              "      <td>0.180</td>\n",
              "      <td>3.661</td>\n",
              "      <td>20.575</td>\n",
              "      <td>1.699</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5561</th>\n",
              "      <td>United States</td>\n",
              "      <td>USA</td>\n",
              "      <td>2002</td>\n",
              "      <td>50.101</td>\n",
              "      <td>18.206</td>\n",
              "      <td>6.624</td>\n",
              "      <td>0.014</td>\n",
              "      <td>0.268</td>\n",
              "      <td>2.801</td>\n",
              "      <td>20.217</td>\n",
              "      <td>1.768</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1ca5e2a0-78c8-4f34-9994-5bef962bdb67')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-1ca5e2a0-78c8-4f34-9994-5bef962bdb67 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-1ca5e2a0-78c8-4f34-9994-5bef962bdb67');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ],
      "source": [
        "us_elec_df.head()"
      ],
      "id": "bhJGv33kA3hV"
    },
    {
      "cell_type": "markdown",
      "source": [
        "II.4) Assign different energy sources to individual variables and use line plot to depict temporal change"
      ],
      "metadata": {
        "id": "1cStlgfL7gC9"
      },
      "id": "1cStlgfL7gC9"
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "id": "CAXE3F8gA3hW",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 462
        },
        "outputId": "c031d8ab-8b72-4920-c434-f1189ded5c11"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 864x504 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "years = us_elec_df['Year']\n",
        "coal_us = us_elec_df['Coal (% electricity)']\n",
        "gas_us = us_elec_df['Gas (% electricity)']\n",
        "hydro_us = us_elec_df['Hydro (% electricity)']\n",
        "solar_us = us_elec_df['Solar (% electricity)']\n",
        "wind_us = us_elec_df['Wind (% electricity)']\n",
        "oil_us = us_elec_df['Oil (% electricity)']\n",
        "nuclear_us = us_elec_df['Nuclear (% electricity)']\n",
        "other_ren_us = us_elec_df['Other renewables including bioenergy (% electricity)']\n",
        "\n",
        "energy_sources = ['Coal', 'Gas', 'Hydro', 'Solar', 'Wind', 'Oil', 'Nuclear', 'Other renewables']\n",
        "\n",
        "fig, ax = plt.subplots() \n",
        "\n",
        "ax.plot(years, coal_us, label = \"Coal\", linestyle=\"-\")\n",
        "ax.plot(years, gas_us, label = \"Gas\", linestyle=\"-\")\n",
        "ax.plot(years, hydro_us, label = \"Hydro\", linestyle=\"-\")\n",
        "ax.plot(years, solar_us, label = \"Solar\", linestyle=\"-\")\n",
        "ax.plot(years, wind_us, label = \"Wind\", linestyle=\"-\")\n",
        "ax.plot(years, oil_us, label = \"Oil\", linestyle=\"-\")\n",
        "ax.plot(years, nuclear_us, label = \"Nuclear\", linestyle=\"-\")\n",
        "ax.plot(years, other_ren_us, label = \"Other\", linestyle=\"-\")\n",
        "\n",
        "listOf_Xticks = np.arange(1998, 2018, 2)\n",
        "plt.xticks(listOf_Xticks)\n",
        "\n",
        "ax.set_xlabel('Year', fontsize=12)\n",
        "ax.set_ylabel('Sources as Percent of Electricity', fontsize=12)\n",
        "\n",
        "ax.set_title('Electricity Mix in the US: 1998 - 2018', fontsize=14)\n",
        "ax.legend(bbox_to_anchor=(1.2, 1), loc='upper right', fontsize=12)\n",
        "fig.set_size_inches((12,7))\n"
      ],
      "id": "CAXE3F8gA3hW"
    },
    {
      "cell_type": "markdown",
      "source": [
        "II.5) Utilize stacked bar plot to capture the temporal trends. By using ax.bar as an object, depict different energy sources in an additive nature"
      ],
      "metadata": {
        "id": "Y8Mn-fZR72Uw"
      },
      "id": "Y8Mn-fZR72Uw"
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "id": "AwERmC7qA3hX",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 462
        },
        "outputId": "56f31e9c-7e72-49f2-d6c4-14355208c801"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1080x504 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "fig, ax = plt.subplots() \n",
        "\n",
        "width = 0.9\n",
        "\n",
        "ax.bar(years, coal_us, width, label = \"Coal\")\n",
        "ax.bar(years, gas_us, width, bottom = coal_us, label = \"Gas\")\n",
        "ax.bar(years, hydro_us, width, bottom = coal_us + gas_us, label = \"Hydro\")\n",
        "ax.bar(years, solar_us, width, bottom = coal_us + gas_us + hydro_us, label = \"Solar\")\n",
        "ax.bar(years, wind_us, width, bottom = coal_us + gas_us + hydro_us + solar_us, label = \"Wind\")\n",
        "ax.bar(years, oil_us, width, bottom = coal_us + gas_us + hydro_us + solar_us + wind_us, label = \"Oil\")\n",
        "ax.bar(years, nuclear_us, width, bottom = coal_us + gas_us + hydro_us + solar_us + wind_us + oil_us, label = \"Nuclear\")\n",
        "ax.bar(years, other_ren_us, width, bottom = coal_us + gas_us + hydro_us + solar_us + wind_us + oil_us + nuclear_us, label = \"Other\")\n",
        "\n",
        "ax.set_xlabel('Year', fontsize=12)\n",
        "ax.set_ylabel('Percent of Electricity', fontsize=12)\n",
        "ax.set_title('Electricity Mix in the US: 1998 - 2018', fontsize=14)\n",
        "ax.legend(bbox_to_anchor=(1.15, 1), loc='upper right', fontsize=12)\n",
        "fig.set_size_inches((15,7))"
      ],
      "id": "AwERmC7qA3hX"
    },
    {
      "cell_type": "markdown",
      "source": [
        "# III. Tracking GHG Emissions"
      ],
      "metadata": {
        "id": "LJs64nTH8TsC"
      },
      "id": "LJs64nTH8TsC"
    },
    {
      "cell_type": "markdown",
      "source": [
        "III.1) Import GHG Emissions caused by Electricity generation over the years"
      ],
      "metadata": {
        "id": "bfLmjO0j8bYw"
      },
      "id": "bfLmjO0j8bYw"
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import files\n",
        " \n",
        " \n",
        "uploaded = files.upload()"
      ],
      "metadata": {
        "id": "ci3W4NNNIqWT",
        "colab": {
          "resources": {
            "http://localhost:8080/nbextensions/google.colab/files.js": {
              "data": "Ly8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQwovLwovLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgovLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKLy8KLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKLy8KLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQovLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAovLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAovLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCi8qKgogKiBAZmlsZW92ZXJ2aWV3IEhlbHBlcnMgZm9yIGdvb2dsZS5jb2xhYiBQeXRob24gbW9kdWxlLgogKi8KKGZ1bmN0aW9uKHNjb3BlKSB7CmZ1bmN0aW9uIHNwYW4odGV4dCwgc3R5bGVBdHRyaWJ1dGVzID0ge30pIHsKICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0OwogIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHN0eWxlQXR0cmlidXRlcykpIHsKICAgIGVsZW1lbnQuc3R5bGVba2V5XSA9IHN0eWxlQXR0cmlidXRlc1trZXldOwogIH0KICByZXR1cm4gZWxlbWVudDsKfQoKLy8gTWF4IG51bWJlciBvZiBieXRlcyB3aGljaCB3aWxsIGJlIHVwbG9hZGVkIGF0IGEgdGltZS4KY29uc3QgTUFYX1BBWUxPQURfU0laRSA9IDEwMCAqIDEwMjQ7CgpmdW5jdGlvbiBfdXBsb2FkRmlsZXMoaW5wdXRJZCwgb3V0cHV0SWQpIHsKICBjb25zdCBzdGVwcyA9IHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCk7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICAvLyBDYWNoZSBzdGVwcyBvbiB0aGUgb3V0cHV0RWxlbWVudCB0byBtYWtlIGl0IGF2YWlsYWJsZSBmb3IgdGhlIG5leHQgY2FsbAogIC8vIHRvIHVwbG9hZEZpbGVzQ29udGludWUgZnJvbSBQeXRob24uCiAgb3V0cHV0RWxlbWVudC5zdGVwcyA9IHN0ZXBzOwoKICByZXR1cm4gX3VwbG9hZEZpbGVzQ29udGludWUob3V0cHV0SWQpOwp9CgovLyBUaGlzIGlzIHJvdWdobHkgYW4gYXN5bmMgZ2VuZXJhdG9yIChub3Qgc3VwcG9ydGVkIGluIHRoZSBicm93c2VyIHlldCksCi8vIHdoZXJlIHRoZXJlIGFyZSBtdWx0aXBsZSBhc3luY2hyb25vdXMgc3RlcHMgYW5kIHRoZSBQeXRob24gc2lkZSBpcyBnb2luZwovLyB0byBwb2xsIGZvciBjb21wbGV0aW9uIG9mIGVhY2ggc3RlcC4KLy8gVGhpcyB1c2VzIGEgUHJvbWlzZSB0byBibG9jayB0aGUgcHl0aG9uIHNpZGUgb24gY29tcGxldGlvbiBvZiBlYWNoIHN0ZXAsCi8vIHRoZW4gcGFzc2VzIHRoZSByZXN1bHQgb2YgdGhlIHByZXZpb3VzIHN0ZXAgYXMgdGhlIGlucHV0IHRvIHRoZSBuZXh0IHN0ZXAuCmZ1bmN0aW9uIF91cGxvYWRGaWxlc0NvbnRpbnVlKG91dHB1dElkKSB7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICBjb25zdCBzdGVwcyA9IG91dHB1dEVsZW1lbnQuc3RlcHM7CgogIGNvbnN0IG5leHQgPSBzdGVwcy5uZXh0KG91dHB1dEVsZW1lbnQubGFzdFByb21pc2VWYWx1ZSk7CiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXh0LnZhbHVlLnByb21pc2UpLnRoZW4oKHZhbHVlKSA9PiB7CiAgICAvLyBDYWNoZSB0aGUgbGFzdCBwcm9taXNlIHZhbHVlIHRvIG1ha2UgaXQgYXZhaWxhYmxlIHRvIHRoZSBuZXh0CiAgICAvLyBzdGVwIG9mIHRoZSBnZW5lcmF0b3IuCiAgICBvdXRwdXRFbGVtZW50Lmxhc3RQcm9taXNlVmFsdWUgPSB2YWx1ZTsKICAgIHJldHVybiBuZXh0LnZhbHVlLnJlc3BvbnNlOwogIH0pOwp9CgovKioKICogR2VuZXJhdG9yIGZ1bmN0aW9uIHdoaWNoIGlzIGNhbGxlZCBiZXR3ZWVuIGVhY2ggYXN5bmMgc3RlcCBvZiB0aGUgdXBsb2FkCiAqIHByb2Nlc3MuCiAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dElkIEVsZW1lbnQgSUQgb2YgdGhlIGlucHV0IGZpbGUgcGlja2VyIGVsZW1lbnQuCiAqIEBwYXJhbSB7c3RyaW5nfSBvdXRwdXRJZCBFbGVtZW50IElEIG9mIHRoZSBvdXRwdXQgZGlzcGxheS4KICogQHJldHVybiB7IUl0ZXJhYmxlPCFPYmplY3Q+fSBJdGVyYWJsZSBvZiBuZXh0IHN0ZXBzLgogKi8KZnVuY3Rpb24qIHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCkgewogIGNvbnN0IGlucHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlucHV0SWQpOwogIGlucHV0RWxlbWVudC5kaXNhYmxlZCA9IGZhbHNlOwoKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIG91dHB1dEVsZW1lbnQuaW5uZXJIVE1MID0gJyc7CgogIGNvbnN0IHBpY2tlZFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgaW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlKSA9PiB7CiAgICAgIHJlc29sdmUoZS50YXJnZXQuZmlsZXMpOwogICAgfSk7CiAgfSk7CgogIGNvbnN0IGNhbmNlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpOwogIGlucHV0RWxlbWVudC5wYXJlbnRFbGVtZW50LmFwcGVuZENoaWxkKGNhbmNlbCk7CiAgY2FuY2VsLnRleHRDb250ZW50ID0gJ0NhbmNlbCB1cGxvYWQnOwogIGNvbnN0IGNhbmNlbFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgY2FuY2VsLm9uY2xpY2sgPSAoKSA9PiB7CiAgICAgIHJlc29sdmUobnVsbCk7CiAgICB9OwogIH0pOwoKICAvLyBXYWl0IGZvciB0aGUgdXNlciB0byBwaWNrIHRoZSBmaWxlcy4KICBjb25zdCBmaWxlcyA9IHlpZWxkIHsKICAgIHByb21pc2U6IFByb21pc2UucmFjZShbcGlja2VkUHJvbWlzZSwgY2FuY2VsUHJvbWlzZV0pLAogICAgcmVzcG9uc2U6IHsKICAgICAgYWN0aW9uOiAnc3RhcnRpbmcnLAogICAgfQogIH07CgogIGNhbmNlbC5yZW1vdmUoKTsKCiAgLy8gRGlzYWJsZSB0aGUgaW5wdXQgZWxlbWVudCBzaW5jZSBmdXJ0aGVyIHBpY2tzIGFyZSBub3QgYWxsb3dlZC4KICBpbnB1dEVsZW1lbnQuZGlzYWJsZWQgPSB0cnVlOwoKICBpZiAoIWZpbGVzKSB7CiAgICByZXR1cm4gewogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbXBsZXRlJywKICAgICAgfQogICAgfTsKICB9CgogIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykgewogICAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpOwogICAgbGkuYXBwZW5kKHNwYW4oZmlsZS5uYW1lLCB7Zm9udFdlaWdodDogJ2JvbGQnfSkpOwogICAgbGkuYXBwZW5kKHNwYW4oCiAgICAgICAgYCgke2ZpbGUudHlwZSB8fCAnbi9hJ30pIC0gJHtmaWxlLnNpemV9IGJ5dGVzLCBgICsKICAgICAgICBgbGFzdCBtb2RpZmllZDogJHsKICAgICAgICAgICAgZmlsZS5sYXN0TW9kaWZpZWREYXRlID8gZmlsZS5sYXN0TW9kaWZpZWREYXRlLnRvTG9jYWxlRGF0ZVN0cmluZygpIDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ24vYSd9IC0gYCkpOwogICAgY29uc3QgcGVyY2VudCA9IHNwYW4oJzAlIGRvbmUnKTsKICAgIGxpLmFwcGVuZENoaWxkKHBlcmNlbnQpOwoKICAgIG91dHB1dEVsZW1lbnQuYXBwZW5kQ2hpbGQobGkpOwoKICAgIGNvbnN0IGZpbGVEYXRhUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7CiAgICAgIHJlYWRlci5vbmxvYWQgPSAoZSkgPT4gewogICAgICAgIHJlc29sdmUoZS50YXJnZXQucmVzdWx0KTsKICAgICAgfTsKICAgICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGZpbGUpOwogICAgfSk7CiAgICAvLyBXYWl0IGZvciB0aGUgZGF0YSB0byBiZSByZWFkeS4KICAgIGxldCBmaWxlRGF0YSA9IHlpZWxkIHsKICAgICAgcHJvbWlzZTogZmlsZURhdGFQcm9taXNlLAogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbnRpbnVlJywKICAgICAgfQogICAgfTsKCiAgICAvLyBVc2UgYSBjaHVua2VkIHNlbmRpbmcgdG8gYXZvaWQgbWVzc2FnZSBzaXplIGxpbWl0cy4gU2VlIGIvNjIxMTU2NjAuCiAgICBsZXQgcG9zaXRpb24gPSAwOwogICAgZG8gewogICAgICBjb25zdCBsZW5ndGggPSBNYXRoLm1pbihmaWxlRGF0YS5ieXRlTGVuZ3RoIC0gcG9zaXRpb24sIE1BWF9QQVlMT0FEX1NJWkUpOwogICAgICBjb25zdCBjaHVuayA9IG5ldyBVaW50OEFycmF5KGZpbGVEYXRhLCBwb3NpdGlvbiwgbGVuZ3RoKTsKICAgICAgcG9zaXRpb24gKz0gbGVuZ3RoOwoKICAgICAgY29uc3QgYmFzZTY0ID0gYnRvYShTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGNodW5rKSk7CiAgICAgIHlpZWxkIHsKICAgICAgICByZXNwb25zZTogewogICAgICAgICAgYWN0aW9uOiAnYXBwZW5kJywKICAgICAgICAgIGZpbGU6IGZpbGUubmFtZSwKICAgICAgICAgIGRhdGE6IGJhc2U2NCwKICAgICAgICB9LAogICAgICB9OwoKICAgICAgbGV0IHBlcmNlbnREb25lID0gZmlsZURhdGEuYnl0ZUxlbmd0aCA9PT0gMCA/CiAgICAgICAgICAxMDAgOgogICAgICAgICAgTWF0aC5yb3VuZCgocG9zaXRpb24gLyBmaWxlRGF0YS5ieXRlTGVuZ3RoKSAqIDEwMCk7CiAgICAgIHBlcmNlbnQudGV4dENvbnRlbnQgPSBgJHtwZXJjZW50RG9uZX0lIGRvbmVgOwoKICAgIH0gd2hpbGUgKHBvc2l0aW9uIDwgZmlsZURhdGEuYnl0ZUxlbmd0aCk7CiAgfQoKICAvLyBBbGwgZG9uZS4KICB5aWVsZCB7CiAgICByZXNwb25zZTogewogICAgICBhY3Rpb246ICdjb21wbGV0ZScsCiAgICB9CiAgfTsKfQoKc2NvcGUuZ29vZ2xlID0gc2NvcGUuZ29vZ2xlIHx8IHt9OwpzY29wZS5nb29nbGUuY29sYWIgPSBzY29wZS5nb29nbGUuY29sYWIgfHwge307CnNjb3BlLmdvb2dsZS5jb2xhYi5fZmlsZXMgPSB7CiAgX3VwbG9hZEZpbGVzLAogIF91cGxvYWRGaWxlc0NvbnRpbnVlLAp9Owp9KShzZWxmKTsK",
              "ok": true,
              "headers": [
                [
                  "content-type",
                  "application/javascript"
                ]
              ],
              "status": 200,
              "status_text": ""
            }
          },
          "base_uri": "https://localhost:8080/",
          "height": 74
        },
        "outputId": "a6fa2a06-205a-4cf6-a8b0-74a06835d45f"
      },
      "id": "ci3W4NNNIqWT",
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-d355c315-716c-484e-b57d-5974bde9be3b\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-d355c315-716c-484e-b57d-5974bde9be3b\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script src=\"/nbextensions/google.colab/files.js\"></script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving GHG Emissions US Electricity.csv to GHG Emissions US Electricity.csv\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {
        "id": "WUGHUSglA3hZ"
      },
      "outputs": [],
      "source": [
        "ghg_emissions_df = pd.read_csv(io.BytesIO(uploaded['GHG Emissions US Electricity.csv']))"
      ],
      "id": "WUGHUSglA3hZ"
    },
    {
      "cell_type": "markdown",
      "source": [
        "III.2) Drop the rows prior to year 1998 and after year 2018"
      ],
      "metadata": {
        "id": "TOFOcnWK9AiA"
      },
      "id": "TOFOcnWK9AiA"
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "id": "X6A5CVF3A3hZ",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "8fbc748e-4c51-4f84-a0c7-b87bcc29606e"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Year  Fossil fuel combustion: carbon dioxide  \\\n",
              "9   1999                             2189.665823   \n",
              "10  2000                             2296.171671   \n",
              "11  2001                             2257.203683   \n",
              "12  2002                             2272.227098   \n",
              "13  2003                             2303.678379   \n",
              "\n",
              "    Fossil fuel combustion: other greenhouse gases  Incineration of waste  \\\n",
              "9                                        24.547756              12.704691   \n",
              "10                                       25.927153              13.441784   \n",
              "11                                       25.793332              13.410018   \n",
              "12                                       27.134299              13.442873   \n",
              "13                                       28.347440              13.588196   \n",
              "\n",
              "    Other electricity generation categories        Total  \n",
              "9                                 17.918824  2244.837094  \n",
              "10                                15.585076  2351.125685  \n",
              "11                                14.979992  2311.387024  \n",
              "12                                13.955179  2326.759449  \n",
              "13                                12.338268  2357.952283  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-527b2bb8-4da0-4e0a-99d8-d7696b7e6a8b\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Year</th>\n",
              "      <th>Fossil fuel combustion: carbon dioxide</th>\n",
              "      <th>Fossil fuel combustion: other greenhouse gases</th>\n",
              "      <th>Incineration of waste</th>\n",
              "      <th>Other electricity generation categories</th>\n",
              "      <th>Total</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>1999</td>\n",
              "      <td>2189.665823</td>\n",
              "      <td>24.547756</td>\n",
              "      <td>12.704691</td>\n",
              "      <td>17.918824</td>\n",
              "      <td>2244.837094</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>2000</td>\n",
              "      <td>2296.171671</td>\n",
              "      <td>25.927153</td>\n",
              "      <td>13.441784</td>\n",
              "      <td>15.585076</td>\n",
              "      <td>2351.125685</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>2001</td>\n",
              "      <td>2257.203683</td>\n",
              "      <td>25.793332</td>\n",
              "      <td>13.410018</td>\n",
              "      <td>14.979992</td>\n",
              "      <td>2311.387024</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>2002</td>\n",
              "      <td>2272.227098</td>\n",
              "      <td>27.134299</td>\n",
              "      <td>13.442873</td>\n",
              "      <td>13.955179</td>\n",
              "      <td>2326.759449</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>2003</td>\n",
              "      <td>2303.678379</td>\n",
              "      <td>28.347440</td>\n",
              "      <td>13.588196</td>\n",
              "      <td>12.338268</td>\n",
              "      <td>2357.952283</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-527b2bb8-4da0-4e0a-99d8-d7696b7e6a8b')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-527b2bb8-4da0-4e0a-99d8-d7696b7e6a8b button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-527b2bb8-4da0-4e0a-99d8-d7696b7e6a8b');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ],
      "source": [
        "ghg_emissions_df.drop(ghg_emissions_df[ghg_emissions_df.Year < 1999].index, inplace = True)\n",
        "ghg_emissions_df.drop(ghg_emissions_df[ghg_emissions_df.Year > 2019].index, inplace = True)\n",
        "ghg_emissions_df.head()"
      ],
      "id": "X6A5CVF3A3hZ"
    },
    {
      "cell_type": "markdown",
      "source": [
        "III.3) Use line plot to track the GHG emissions overs the years"
      ],
      "metadata": {
        "id": "vp_GTEv99LFg"
      },
      "id": "vp_GTEv99LFg"
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {
        "id": "UooIk-TJA3ha",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 462
        },
        "outputId": "86595288-5dfe-460a-f438-b9dca9fe3a6f"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1080x504 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "ghg_years = ghg_emissions_df['Year']\n",
        "ghg_total_emissions = ghg_emissions_df['Total']\n",
        "\n",
        "\n",
        "fig, ax = plt.subplots() \n",
        "\n",
        "ax.plot(ghg_years, ghg_total_emissions, label = \"Total GHG Emissions in MMT CO2\")\n",
        "\n",
        "listOf_Xticks = np.arange(1998, 2019, 2)\n",
        "plt.xticks(listOf_Xticks)\n",
        "\n",
        "ax.set_xlabel('Year', fontsize=12)\n",
        "ax.set_ylabel('GHG Emissions', fontsize=12)\n",
        "ax.set_title('U.S. Emissions, Electricity Generation, MMT CO2 eq.  1998- 2018', fontsize=14)\n",
        "ax.legend(bbox_to_anchor=(1.0, 1), loc='upper right', fontsize=12)\n",
        "fig.set_size_inches((15,7))"
      ],
      "id": "UooIk-TJA3ha"
    },
    {
      "cell_type": "markdown",
      "source": [
        "# IV. Conduct global analysis of GHG Emissions from Electricity Generation by Income Category (as defined by World Bank)"
      ],
      "metadata": {
        "id": "w8R6BJWJAMWz"
      },
      "id": "w8R6BJWJAMWz"
    },
    {
      "cell_type": "markdown",
      "source": [
        "IV.1) Upload the GNP Per Capita information for all countries (basis for Income Categorization)"
      ],
      "metadata": {
        "id": "VjqrRDQKAk8_"
      },
      "id": "VjqrRDQKAk8_"
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import files\n",
        " \n",
        " \n",
        "uploaded = files.upload()"
      ],
      "metadata": {
        "id": "tTFXJ_kQJQ6c",
        "colab": {
          "resources": {
            "http://localhost:8080/nbextensions/google.colab/files.js": {
              "data": "Ly8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQwovLwovLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgovLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKLy8KLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKLy8KLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQovLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAovLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAovLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCi8qKgogKiBAZmlsZW92ZXJ2aWV3IEhlbHBlcnMgZm9yIGdvb2dsZS5jb2xhYiBQeXRob24gbW9kdWxlLgogKi8KKGZ1bmN0aW9uKHNjb3BlKSB7CmZ1bmN0aW9uIHNwYW4odGV4dCwgc3R5bGVBdHRyaWJ1dGVzID0ge30pIHsKICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0OwogIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHN0eWxlQXR0cmlidXRlcykpIHsKICAgIGVsZW1lbnQuc3R5bGVba2V5XSA9IHN0eWxlQXR0cmlidXRlc1trZXldOwogIH0KICByZXR1cm4gZWxlbWVudDsKfQoKLy8gTWF4IG51bWJlciBvZiBieXRlcyB3aGljaCB3aWxsIGJlIHVwbG9hZGVkIGF0IGEgdGltZS4KY29uc3QgTUFYX1BBWUxPQURfU0laRSA9IDEwMCAqIDEwMjQ7CgpmdW5jdGlvbiBfdXBsb2FkRmlsZXMoaW5wdXRJZCwgb3V0cHV0SWQpIHsKICBjb25zdCBzdGVwcyA9IHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCk7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICAvLyBDYWNoZSBzdGVwcyBvbiB0aGUgb3V0cHV0RWxlbWVudCB0byBtYWtlIGl0IGF2YWlsYWJsZSBmb3IgdGhlIG5leHQgY2FsbAogIC8vIHRvIHVwbG9hZEZpbGVzQ29udGludWUgZnJvbSBQeXRob24uCiAgb3V0cHV0RWxlbWVudC5zdGVwcyA9IHN0ZXBzOwoKICByZXR1cm4gX3VwbG9hZEZpbGVzQ29udGludWUob3V0cHV0SWQpOwp9CgovLyBUaGlzIGlzIHJvdWdobHkgYW4gYXN5bmMgZ2VuZXJhdG9yIChub3Qgc3VwcG9ydGVkIGluIHRoZSBicm93c2VyIHlldCksCi8vIHdoZXJlIHRoZXJlIGFyZSBtdWx0aXBsZSBhc3luY2hyb25vdXMgc3RlcHMgYW5kIHRoZSBQeXRob24gc2lkZSBpcyBnb2luZwovLyB0byBwb2xsIGZvciBjb21wbGV0aW9uIG9mIGVhY2ggc3RlcC4KLy8gVGhpcyB1c2VzIGEgUHJvbWlzZSB0byBibG9jayB0aGUgcHl0aG9uIHNpZGUgb24gY29tcGxldGlvbiBvZiBlYWNoIHN0ZXAsCi8vIHRoZW4gcGFzc2VzIHRoZSByZXN1bHQgb2YgdGhlIHByZXZpb3VzIHN0ZXAgYXMgdGhlIGlucHV0IHRvIHRoZSBuZXh0IHN0ZXAuCmZ1bmN0aW9uIF91cGxvYWRGaWxlc0NvbnRpbnVlKG91dHB1dElkKSB7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICBjb25zdCBzdGVwcyA9IG91dHB1dEVsZW1lbnQuc3RlcHM7CgogIGNvbnN0IG5leHQgPSBzdGVwcy5uZXh0KG91dHB1dEVsZW1lbnQubGFzdFByb21pc2VWYWx1ZSk7CiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXh0LnZhbHVlLnByb21pc2UpLnRoZW4oKHZhbHVlKSA9PiB7CiAgICAvLyBDYWNoZSB0aGUgbGFzdCBwcm9taXNlIHZhbHVlIHRvIG1ha2UgaXQgYXZhaWxhYmxlIHRvIHRoZSBuZXh0CiAgICAvLyBzdGVwIG9mIHRoZSBnZW5lcmF0b3IuCiAgICBvdXRwdXRFbGVtZW50Lmxhc3RQcm9taXNlVmFsdWUgPSB2YWx1ZTsKICAgIHJldHVybiBuZXh0LnZhbHVlLnJlc3BvbnNlOwogIH0pOwp9CgovKioKICogR2VuZXJhdG9yIGZ1bmN0aW9uIHdoaWNoIGlzIGNhbGxlZCBiZXR3ZWVuIGVhY2ggYXN5bmMgc3RlcCBvZiB0aGUgdXBsb2FkCiAqIHByb2Nlc3MuCiAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dElkIEVsZW1lbnQgSUQgb2YgdGhlIGlucHV0IGZpbGUgcGlja2VyIGVsZW1lbnQuCiAqIEBwYXJhbSB7c3RyaW5nfSBvdXRwdXRJZCBFbGVtZW50IElEIG9mIHRoZSBvdXRwdXQgZGlzcGxheS4KICogQHJldHVybiB7IUl0ZXJhYmxlPCFPYmplY3Q+fSBJdGVyYWJsZSBvZiBuZXh0IHN0ZXBzLgogKi8KZnVuY3Rpb24qIHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCkgewogIGNvbnN0IGlucHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlucHV0SWQpOwogIGlucHV0RWxlbWVudC5kaXNhYmxlZCA9IGZhbHNlOwoKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIG91dHB1dEVsZW1lbnQuaW5uZXJIVE1MID0gJyc7CgogIGNvbnN0IHBpY2tlZFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgaW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlKSA9PiB7CiAgICAgIHJlc29sdmUoZS50YXJnZXQuZmlsZXMpOwogICAgfSk7CiAgfSk7CgogIGNvbnN0IGNhbmNlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpOwogIGlucHV0RWxlbWVudC5wYXJlbnRFbGVtZW50LmFwcGVuZENoaWxkKGNhbmNlbCk7CiAgY2FuY2VsLnRleHRDb250ZW50ID0gJ0NhbmNlbCB1cGxvYWQnOwogIGNvbnN0IGNhbmNlbFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgY2FuY2VsLm9uY2xpY2sgPSAoKSA9PiB7CiAgICAgIHJlc29sdmUobnVsbCk7CiAgICB9OwogIH0pOwoKICAvLyBXYWl0IGZvciB0aGUgdXNlciB0byBwaWNrIHRoZSBmaWxlcy4KICBjb25zdCBmaWxlcyA9IHlpZWxkIHsKICAgIHByb21pc2U6IFByb21pc2UucmFjZShbcGlja2VkUHJvbWlzZSwgY2FuY2VsUHJvbWlzZV0pLAogICAgcmVzcG9uc2U6IHsKICAgICAgYWN0aW9uOiAnc3RhcnRpbmcnLAogICAgfQogIH07CgogIGNhbmNlbC5yZW1vdmUoKTsKCiAgLy8gRGlzYWJsZSB0aGUgaW5wdXQgZWxlbWVudCBzaW5jZSBmdXJ0aGVyIHBpY2tzIGFyZSBub3QgYWxsb3dlZC4KICBpbnB1dEVsZW1lbnQuZGlzYWJsZWQgPSB0cnVlOwoKICBpZiAoIWZpbGVzKSB7CiAgICByZXR1cm4gewogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbXBsZXRlJywKICAgICAgfQogICAgfTsKICB9CgogIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykgewogICAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpOwogICAgbGkuYXBwZW5kKHNwYW4oZmlsZS5uYW1lLCB7Zm9udFdlaWdodDogJ2JvbGQnfSkpOwogICAgbGkuYXBwZW5kKHNwYW4oCiAgICAgICAgYCgke2ZpbGUudHlwZSB8fCAnbi9hJ30pIC0gJHtmaWxlLnNpemV9IGJ5dGVzLCBgICsKICAgICAgICBgbGFzdCBtb2RpZmllZDogJHsKICAgICAgICAgICAgZmlsZS5sYXN0TW9kaWZpZWREYXRlID8gZmlsZS5sYXN0TW9kaWZpZWREYXRlLnRvTG9jYWxlRGF0ZVN0cmluZygpIDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ24vYSd9IC0gYCkpOwogICAgY29uc3QgcGVyY2VudCA9IHNwYW4oJzAlIGRvbmUnKTsKICAgIGxpLmFwcGVuZENoaWxkKHBlcmNlbnQpOwoKICAgIG91dHB1dEVsZW1lbnQuYXBwZW5kQ2hpbGQobGkpOwoKICAgIGNvbnN0IGZpbGVEYXRhUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7CiAgICAgIHJlYWRlci5vbmxvYWQgPSAoZSkgPT4gewogICAgICAgIHJlc29sdmUoZS50YXJnZXQucmVzdWx0KTsKICAgICAgfTsKICAgICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGZpbGUpOwogICAgfSk7CiAgICAvLyBXYWl0IGZvciB0aGUgZGF0YSB0byBiZSByZWFkeS4KICAgIGxldCBmaWxlRGF0YSA9IHlpZWxkIHsKICAgICAgcHJvbWlzZTogZmlsZURhdGFQcm9taXNlLAogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbnRpbnVlJywKICAgICAgfQogICAgfTsKCiAgICAvLyBVc2UgYSBjaHVua2VkIHNlbmRpbmcgdG8gYXZvaWQgbWVzc2FnZSBzaXplIGxpbWl0cy4gU2VlIGIvNjIxMTU2NjAuCiAgICBsZXQgcG9zaXRpb24gPSAwOwogICAgZG8gewogICAgICBjb25zdCBsZW5ndGggPSBNYXRoLm1pbihmaWxlRGF0YS5ieXRlTGVuZ3RoIC0gcG9zaXRpb24sIE1BWF9QQVlMT0FEX1NJWkUpOwogICAgICBjb25zdCBjaHVuayA9IG5ldyBVaW50OEFycmF5KGZpbGVEYXRhLCBwb3NpdGlvbiwgbGVuZ3RoKTsKICAgICAgcG9zaXRpb24gKz0gbGVuZ3RoOwoKICAgICAgY29uc3QgYmFzZTY0ID0gYnRvYShTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGNodW5rKSk7CiAgICAgIHlpZWxkIHsKICAgICAgICByZXNwb25zZTogewogICAgICAgICAgYWN0aW9uOiAnYXBwZW5kJywKICAgICAgICAgIGZpbGU6IGZpbGUubmFtZSwKICAgICAgICAgIGRhdGE6IGJhc2U2NCwKICAgICAgICB9LAogICAgICB9OwoKICAgICAgbGV0IHBlcmNlbnREb25lID0gZmlsZURhdGEuYnl0ZUxlbmd0aCA9PT0gMCA/CiAgICAgICAgICAxMDAgOgogICAgICAgICAgTWF0aC5yb3VuZCgocG9zaXRpb24gLyBmaWxlRGF0YS5ieXRlTGVuZ3RoKSAqIDEwMCk7CiAgICAgIHBlcmNlbnQudGV4dENvbnRlbnQgPSBgJHtwZXJjZW50RG9uZX0lIGRvbmVgOwoKICAgIH0gd2hpbGUgKHBvc2l0aW9uIDwgZmlsZURhdGEuYnl0ZUxlbmd0aCk7CiAgfQoKICAvLyBBbGwgZG9uZS4KICB5aWVsZCB7CiAgICByZXNwb25zZTogewogICAgICBhY3Rpb246ICdjb21wbGV0ZScsCiAgICB9CiAgfTsKfQoKc2NvcGUuZ29vZ2xlID0gc2NvcGUuZ29vZ2xlIHx8IHt9OwpzY29wZS5nb29nbGUuY29sYWIgPSBzY29wZS5nb29nbGUuY29sYWIgfHwge307CnNjb3BlLmdvb2dsZS5jb2xhYi5fZmlsZXMgPSB7CiAgX3VwbG9hZEZpbGVzLAogIF91cGxvYWRGaWxlc0NvbnRpbnVlLAp9Owp9KShzZWxmKTsK",
              "ok": true,
              "headers": [
                [
                  "content-type",
                  "application/javascript"
                ]
              ],
              "status": 200,
              "status_text": ""
            }
          },
          "base_uri": "https://localhost:8080/",
          "height": 74
        },
        "outputId": "f19f991b-c2e9-4b81-8d57-ecb60ecd7a5c"
      },
      "id": "tTFXJ_kQJQ6c",
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-796e846f-115a-4271-bb31-65610cb95283\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-796e846f-115a-4271-bb31-65610cb95283\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script src=\"/nbextensions/google.colab/files.js\"></script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving gnp-per-capita-worldbank.csv to gnp-per-capita-worldbank.csv\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {
        "id": "pqpXf4IWA3ha",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 332
        },
        "outputId": "cf62118d-6b0c-4427-979c-a6bb4772cd08"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Year  Aruba  Africa Eastern and Southern  Afghanistan  \\\n",
              "0  1960    NaN                          NaN          NaN   \n",
              "1  1961    NaN                          NaN          NaN   \n",
              "2  1962    NaN                          NaN          NaN   \n",
              "3  1963    NaN                          NaN          NaN   \n",
              "4  1964    NaN                          NaN          NaN   \n",
              "\n",
              "   Africa Western and Central  Angola  Albania  Andorra  Arab World  \\\n",
              "0                         NaN     NaN      NaN      NaN         NaN   \n",
              "1                         NaN     NaN      NaN      NaN         NaN   \n",
              "2                  113.682775     NaN      NaN      NaN         NaN   \n",
              "3                  122.151563     NaN      NaN      NaN         NaN   \n",
              "4                  128.210427     NaN      NaN      NaN         NaN   \n",
              "\n",
              "   United Arab Emirates  ...  Virgin Islands (U.S.)  Vietnam  Vanuatu  \\\n",
              "0                   NaN  ...                    NaN      NaN      NaN   \n",
              "1                   NaN  ...                    NaN      NaN      NaN   \n",
              "2                   NaN  ...                    NaN      NaN      NaN   \n",
              "3                   NaN  ...                    NaN      NaN      NaN   \n",
              "4                   NaN  ...                    NaN      NaN      NaN   \n",
              "\n",
              "        World  Samoa  Kosovo  Yemen, Rep.  South Africa  Zambia  Zimbabwe  \n",
              "0         NaN    NaN     NaN          NaN           NaN     NaN       NaN  \n",
              "1         NaN    NaN     NaN          NaN           NaN     NaN       NaN  \n",
              "2  481.759876    NaN     NaN          NaN         460.0   190.0     270.0  \n",
              "3  508.662997    NaN     NaN          NaN         490.0   190.0     270.0  \n",
              "4  544.830574    NaN     NaN          NaN         520.0   210.0     260.0  \n",
              "\n",
              "[5 rows x 267 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b772f0db-24fe-4b37-95ae-935915c2ff44\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Year</th>\n",
              "      <th>Aruba</th>\n",
              "      <th>Africa Eastern and Southern</th>\n",
              "      <th>Afghanistan</th>\n",
              "      <th>Africa Western and Central</th>\n",
              "      <th>Angola</th>\n",
              "      <th>Albania</th>\n",
              "      <th>Andorra</th>\n",
              "      <th>Arab World</th>\n",
              "      <th>United Arab Emirates</th>\n",
              "      <th>...</th>\n",
              "      <th>Virgin Islands (U.S.)</th>\n",
              "      <th>Vietnam</th>\n",
              "      <th>Vanuatu</th>\n",
              "      <th>World</th>\n",
              "      <th>Samoa</th>\n",
              "      <th>Kosovo</th>\n",
              "      <th>Yemen, Rep.</th>\n",
              "      <th>South Africa</th>\n",
              "      <th>Zambia</th>\n",
              "      <th>Zimbabwe</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1960</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1961</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1962</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>113.682775</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>481.759876</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>460.0</td>\n",
              "      <td>190.0</td>\n",
              "      <td>270.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1963</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>122.151563</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>508.662997</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>490.0</td>\n",
              "      <td>190.0</td>\n",
              "      <td>270.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1964</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>128.210427</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>544.830574</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>520.0</td>\n",
              "      <td>210.0</td>\n",
              "      <td>260.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 267 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b772f0db-24fe-4b37-95ae-935915c2ff44')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-b772f0db-24fe-4b37-95ae-935915c2ff44 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-b772f0db-24fe-4b37-95ae-935915c2ff44');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ],
      "source": [
        "gnp_per_capita_df = pd.read_csv(io.BytesIO(uploaded['gnp-per-capita-worldbank.csv']))\n",
        "gnp_per_capita_df.head()"
      ],
      "id": "pqpXf4IWA3ha"
    },
    {
      "cell_type": "markdown",
      "source": [
        "IV.2) Drop the rows prior to year 1998 and after year 2018"
      ],
      "metadata": {
        "id": "ezG7qo27AyAi"
      },
      "id": "ezG7qo27AyAi"
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {
        "id": "sQ0ZQk2NA3hb",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "5322f82a-69a3-4b36-b8e1-bca464a1c23e"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(21, 267)"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ],
      "source": [
        "gnp_per_capita_df.drop(gnp_per_capita_df[gnp_per_capita_df.Year < 1998].index, inplace = True)\n",
        "gnp_per_capita_df.drop(gnp_per_capita_df[gnp_per_capita_df.Year > 2018].index, inplace = True)\n",
        "np.shape(gnp_per_capita_df)"
      ],
      "id": "sQ0ZQk2NA3hb"
    },
    {
      "cell_type": "markdown",
      "source": [
        "IV.3) Drop any columns with NaN values to ensure that any future modeling remains unaffected"
      ],
      "metadata": {
        "id": "A9Ri8y3MA4-n"
      },
      "id": "A9Ri8y3MA4-n"
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "metadata": {
        "id": "ZOuVXKzyA3hb",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 352
        },
        "outputId": "106e8985-19d6-4a97-94b9-c4e9f6040d39"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Year  Africa Eastern and Southern  Africa Western and Central  Angola  \\\n",
              "38  1998                   693.264194                  463.578133   410.0   \n",
              "39  1999                   672.084002                  465.941051   330.0   \n",
              "40  2000                   666.870147                  456.075182   360.0   \n",
              "41  2001                   639.798492                  480.245828   390.0   \n",
              "42  2002                   624.488639                  525.026892   590.0   \n",
              "\n",
              "    Albania   Arab World  Argentina  Armenia  Antigua and Barbuda  Australia  \\\n",
              "38    860.0  2438.872773     8030.0    590.0               9270.0    21780.0   \n",
              "39    950.0  2455.149369     7580.0    610.0               9610.0    21440.0   \n",
              "40   1100.0  2614.494074     7470.0    660.0              10100.0    21130.0   \n",
              "41   1280.0  2726.045211     7000.0    710.0               9850.0    20160.0   \n",
              "42   1370.0  2689.050682     4040.0    800.0               9660.0    20030.0   \n",
              "\n",
              "    ...  United States  Uzbekistan  St. Vincent and the Grenadines  Vietnam  \\\n",
              "38  ...        32020.0       620.0                          3190.0    340.0   \n",
              "39  ...        33670.0       650.0                          3310.0    350.0   \n",
              "40  ...        35960.0       630.0                          3470.0    380.0   \n",
              "41  ...        36720.0       560.0                          3650.0    400.0   \n",
              "42  ...        37310.0       450.0                          3950.0    420.0   \n",
              "\n",
              "    Vanuatu        World  Yemen, Rep.  South Africa  Zambia  Zimbabwe  \n",
              "38   1450.0  5328.886999        370.0        3590.0   360.0     620.0  \n",
              "39   1430.0  5333.583867        380.0        3480.0   350.0     570.0  \n",
              "40   1430.0  5520.322295        430.0        3420.0   330.0     510.0  \n",
              "41   1370.0  5498.241909        480.0        3190.0   350.0     540.0  \n",
              "42   1230.0  5454.419028        520.0        2990.0   360.0     490.0  \n",
              "\n",
              "[5 rows x 219 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-bc2a7c5a-293e-412a-a2cf-12e39f727930\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Year</th>\n",
              "      <th>Africa Eastern and Southern</th>\n",
              "      <th>Africa Western and Central</th>\n",
              "      <th>Angola</th>\n",
              "      <th>Albania</th>\n",
              "      <th>Arab World</th>\n",
              "      <th>Argentina</th>\n",
              "      <th>Armenia</th>\n",
              "      <th>Antigua and Barbuda</th>\n",
              "      <th>Australia</th>\n",
              "      <th>...</th>\n",
              "      <th>United States</th>\n",
              "      <th>Uzbekistan</th>\n",
              "      <th>St. Vincent and the Grenadines</th>\n",
              "      <th>Vietnam</th>\n",
              "      <th>Vanuatu</th>\n",
              "      <th>World</th>\n",
              "      <th>Yemen, Rep.</th>\n",
              "      <th>South Africa</th>\n",
              "      <th>Zambia</th>\n",
              "      <th>Zimbabwe</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>38</th>\n",
              "      <td>1998</td>\n",
              "      <td>693.264194</td>\n",
              "      <td>463.578133</td>\n",
              "      <td>410.0</td>\n",
              "      <td>860.0</td>\n",
              "      <td>2438.872773</td>\n",
              "      <td>8030.0</td>\n",
              "      <td>590.0</td>\n",
              "      <td>9270.0</td>\n",
              "      <td>21780.0</td>\n",
              "      <td>...</td>\n",
              "      <td>32020.0</td>\n",
              "      <td>620.0</td>\n",
              "      <td>3190.0</td>\n",
              "      <td>340.0</td>\n",
              "      <td>1450.0</td>\n",
              "      <td>5328.886999</td>\n",
              "      <td>370.0</td>\n",
              "      <td>3590.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>620.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>39</th>\n",
              "      <td>1999</td>\n",
              "      <td>672.084002</td>\n",
              "      <td>465.941051</td>\n",
              "      <td>330.0</td>\n",
              "      <td>950.0</td>\n",
              "      <td>2455.149369</td>\n",
              "      <td>7580.0</td>\n",
              "      <td>610.0</td>\n",
              "      <td>9610.0</td>\n",
              "      <td>21440.0</td>\n",
              "      <td>...</td>\n",
              "      <td>33670.0</td>\n",
              "      <td>650.0</td>\n",
              "      <td>3310.0</td>\n",
              "      <td>350.0</td>\n",
              "      <td>1430.0</td>\n",
              "      <td>5333.583867</td>\n",
              "      <td>380.0</td>\n",
              "      <td>3480.0</td>\n",
              "      <td>350.0</td>\n",
              "      <td>570.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>40</th>\n",
              "      <td>2000</td>\n",
              "      <td>666.870147</td>\n",
              "      <td>456.075182</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1100.0</td>\n",
              "      <td>2614.494074</td>\n",
              "      <td>7470.0</td>\n",
              "      <td>660.0</td>\n",
              "      <td>10100.0</td>\n",
              "      <td>21130.0</td>\n",
              "      <td>...</td>\n",
              "      <td>35960.0</td>\n",
              "      <td>630.0</td>\n",
              "      <td>3470.0</td>\n",
              "      <td>380.0</td>\n",
              "      <td>1430.0</td>\n",
              "      <td>5520.322295</td>\n",
              "      <td>430.0</td>\n",
              "      <td>3420.0</td>\n",
              "      <td>330.0</td>\n",
              "      <td>510.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>41</th>\n",
              "      <td>2001</td>\n",
              "      <td>639.798492</td>\n",
              "      <td>480.245828</td>\n",
              "      <td>390.0</td>\n",
              "      <td>1280.0</td>\n",
              "      <td>2726.045211</td>\n",
              "      <td>7000.0</td>\n",
              "      <td>710.0</td>\n",
              "      <td>9850.0</td>\n",
              "      <td>20160.0</td>\n",
              "      <td>...</td>\n",
              "      <td>36720.0</td>\n",
              "      <td>560.0</td>\n",
              "      <td>3650.0</td>\n",
              "      <td>400.0</td>\n",
              "      <td>1370.0</td>\n",
              "      <td>5498.241909</td>\n",
              "      <td>480.0</td>\n",
              "      <td>3190.0</td>\n",
              "      <td>350.0</td>\n",
              "      <td>540.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>42</th>\n",
              "      <td>2002</td>\n",
              "      <td>624.488639</td>\n",
              "      <td>525.026892</td>\n",
              "      <td>590.0</td>\n",
              "      <td>1370.0</td>\n",
              "      <td>2689.050682</td>\n",
              "      <td>4040.0</td>\n",
              "      <td>800.0</td>\n",
              "      <td>9660.0</td>\n",
              "      <td>20030.0</td>\n",
              "      <td>...</td>\n",
              "      <td>37310.0</td>\n",
              "      <td>450.0</td>\n",
              "      <td>3950.0</td>\n",
              "      <td>420.0</td>\n",
              "      <td>1230.0</td>\n",
              "      <td>5454.419028</td>\n",
              "      <td>520.0</td>\n",
              "      <td>2990.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>490.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 219 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bc2a7c5a-293e-412a-a2cf-12e39f727930')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-bc2a7c5a-293e-412a-a2cf-12e39f727930 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-bc2a7c5a-293e-412a-a2cf-12e39f727930');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ],
      "source": [
        "gnp_per_capita_df.dropna(axis=1, how='any', inplace=True)\n",
        "gnp_per_capita_df.head()"
      ],
      "id": "ZOuVXKzyA3hb"
    },
    {
      "cell_type": "markdown",
      "source": [
        "IV.4) Begin the track the change in GHG Emission based on Electricity Generation by first creating a dataframe for the year 1998 across countries"
      ],
      "metadata": {
        "id": "E2DHIfeEGORv"
      },
      "id": "E2DHIfeEGORv"
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "metadata": {
        "id": "B1pZRTlaA3hb",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 285
        },
        "outputId": "2e8367bd-c59e-40f2-bf2b-802e5b110fa8"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           Entity Code  Year  Coal (% electricity)  Gas (% electricity)  \\\n",
              "33         Africa  NaN  1998                49.642               19.032   \n",
              "63        Albania  ALB  1998                 0.000                0.000   \n",
              "118       Algeria  DZA  1998                   NaN                  NaN   \n",
              "205     Argentina  ARG  1998                 2.438               37.779   \n",
              "281  Asia Pacific  NaN  1998                47.956               13.844   \n",
              "\n",
              "     Hydro (% electricity)  Solar (% electricity)  Wind (% electricity)  \\\n",
              "33                  16.405                  0.000                 0.002   \n",
              "63                  96.282                  0.000                 0.000   \n",
              "118                  0.924                  0.000                 0.000   \n",
              "205                 43.713                  0.000                 0.044   \n",
              "281                 13.163                  0.005                 0.039   \n",
              "\n",
              "     Oil (% electricity)  Nuclear (% electricity)  \\\n",
              "33                10.553                    3.347   \n",
              "63                 3.718                    0.000   \n",
              "118                  NaN                    0.000   \n",
              "205                5.137                   10.049   \n",
              "281               11.040                   12.428   \n",
              "\n",
              "     Other renewables including bioenergy (% electricity)  \n",
              "33                                               0.422     \n",
              "63                                               0.000     \n",
              "118                                              0.000     \n",
              "205                                              0.625     \n",
              "281                                              0.975     "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5d638bae-3e49-4da5-9d19-ac84398ebecc\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Entity</th>\n",
              "      <th>Code</th>\n",
              "      <th>Year</th>\n",
              "      <th>Coal (% electricity)</th>\n",
              "      <th>Gas (% electricity)</th>\n",
              "      <th>Hydro (% electricity)</th>\n",
              "      <th>Solar (% electricity)</th>\n",
              "      <th>Wind (% electricity)</th>\n",
              "      <th>Oil (% electricity)</th>\n",
              "      <th>Nuclear (% electricity)</th>\n",
              "      <th>Other renewables including bioenergy (% electricity)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>33</th>\n",
              "      <td>Africa</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1998</td>\n",
              "      <td>49.642</td>\n",
              "      <td>19.032</td>\n",
              "      <td>16.405</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.002</td>\n",
              "      <td>10.553</td>\n",
              "      <td>3.347</td>\n",
              "      <td>0.422</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>63</th>\n",
              "      <td>Albania</td>\n",
              "      <td>ALB</td>\n",
              "      <td>1998</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>96.282</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>3.718</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>118</th>\n",
              "      <td>Algeria</td>\n",
              "      <td>DZA</td>\n",
              "      <td>1998</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.924</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>205</th>\n",
              "      <td>Argentina</td>\n",
              "      <td>ARG</td>\n",
              "      <td>1998</td>\n",
              "      <td>2.438</td>\n",
              "      <td>37.779</td>\n",
              "      <td>43.713</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.044</td>\n",
              "      <td>5.137</td>\n",
              "      <td>10.049</td>\n",
              "      <td>0.625</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>281</th>\n",
              "      <td>Asia Pacific</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1998</td>\n",
              "      <td>47.956</td>\n",
              "      <td>13.844</td>\n",
              "      <td>13.163</td>\n",
              "      <td>0.005</td>\n",
              "      <td>0.039</td>\n",
              "      <td>11.040</td>\n",
              "      <td>12.428</td>\n",
              "      <td>0.975</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5d638bae-3e49-4da5-9d19-ac84398ebecc')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-5d638bae-3e49-4da5-9d19-ac84398ebecc button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-5d638bae-3e49-4da5-9d19-ac84398ebecc');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ],
      "source": [
        "clean_elec_1998_df = clean_elec_df[clean_elec_df['Year'] == 1998]\n",
        "clean_elec_1998_df.head()"
      ],
      "id": "B1pZRTlaA3hb"
    },
    {
      "cell_type": "markdown",
      "source": [
        "IV.5) Proceed to gather data on country and GNP per Capita in the year 1998"
      ],
      "metadata": {
        "id": "J8GAZ5VJGu6X"
      },
      "id": "J8GAZ5VJGu6X"
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "metadata": {
        "id": "yFcoChReA3hc",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 226
        },
        "outputId": "9b6698fa-22c2-4eda-ebbd-8ed8d0e8de5d"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Year  Africa Eastern and Southern  Africa Western and Central  Angola  \\\n",
              "38  1998                   693.264194                  463.578133   410.0   \n",
              "\n",
              "    Albania   Arab World  Argentina  Armenia  Antigua and Barbuda  Australia  \\\n",
              "38    860.0  2438.872773     8030.0    590.0               9270.0    21780.0   \n",
              "\n",
              "    ...  United States  Uzbekistan  St. Vincent and the Grenadines  Vietnam  \\\n",
              "38  ...        32020.0       620.0                          3190.0    340.0   \n",
              "\n",
              "    Vanuatu        World  Yemen, Rep.  South Africa  Zambia  Zimbabwe  \n",
              "38   1450.0  5328.886999        370.0        3590.0   360.0     620.0  \n",
              "\n",
              "[1 rows x 219 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b1037c7e-87a5-4a68-b9de-e7dc244b0ee5\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Year</th>\n",
              "      <th>Africa Eastern and Southern</th>\n",
              "      <th>Africa Western and Central</th>\n",
              "      <th>Angola</th>\n",
              "      <th>Albania</th>\n",
              "      <th>Arab World</th>\n",
              "      <th>Argentina</th>\n",
              "      <th>Armenia</th>\n",
              "      <th>Antigua and Barbuda</th>\n",
              "      <th>Australia</th>\n",
              "      <th>...</th>\n",
              "      <th>United States</th>\n",
              "      <th>Uzbekistan</th>\n",
              "      <th>St. Vincent and the Grenadines</th>\n",
              "      <th>Vietnam</th>\n",
              "      <th>Vanuatu</th>\n",
              "      <th>World</th>\n",
              "      <th>Yemen, Rep.</th>\n",
              "      <th>South Africa</th>\n",
              "      <th>Zambia</th>\n",
              "      <th>Zimbabwe</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>38</th>\n",
              "      <td>1998</td>\n",
              "      <td>693.264194</td>\n",
              "      <td>463.578133</td>\n",
              "      <td>410.0</td>\n",
              "      <td>860.0</td>\n",
              "      <td>2438.872773</td>\n",
              "      <td>8030.0</td>\n",
              "      <td>590.0</td>\n",
              "      <td>9270.0</td>\n",
              "      <td>21780.0</td>\n",
              "      <td>...</td>\n",
              "      <td>32020.0</td>\n",
              "      <td>620.0</td>\n",
              "      <td>3190.0</td>\n",
              "      <td>340.0</td>\n",
              "      <td>1450.0</td>\n",
              "      <td>5328.886999</td>\n",
              "      <td>370.0</td>\n",
              "      <td>3590.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>620.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1 rows × 219 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b1037c7e-87a5-4a68-b9de-e7dc244b0ee5')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-b1037c7e-87a5-4a68-b9de-e7dc244b0ee5 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-b1037c7e-87a5-4a68-b9de-e7dc244b0ee5');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ],
      "source": [
        "gnp_per_capita_1998_df = gnp_per_capita_df[gnp_per_capita_df['Year'] == 1998]\n",
        "gnp_per_capita_1998_df.head()"
      ],
      "id": "yFcoChReA3hc"
    },
    {
      "cell_type": "markdown",
      "source": [
        "IV.6) By ensuring that countries are present in rows rather than columns we conduct a transform to ensure an easy merge between share of electricity and GNP per Capita dataframes"
      ],
      "metadata": {
        "id": "dRDOyTp6G6nd"
      },
      "id": "dRDOyTp6G6nd"
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "metadata": {
        "id": "4ymsetdSA3hc",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "34d300b7-f18e-440d-c557-5dfdb58195c5"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                      38\n",
              "Year                         1998.000000\n",
              "Africa Eastern and Southern   693.264194\n",
              "Africa Western and Central    463.578133\n",
              "Angola                        410.000000\n",
              "Albania                       860.000000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-99ac62e7-29bf-4ec7-8692-3166d1ff829c\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>38</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Year</th>\n",
              "      <td>1998.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Africa Eastern and Southern</th>\n",
              "      <td>693.264194</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Africa Western and Central</th>\n",
              "      <td>463.578133</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Angola</th>\n",
              "      <td>410.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Albania</th>\n",
              "      <td>860.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-99ac62e7-29bf-4ec7-8692-3166d1ff829c')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-99ac62e7-29bf-4ec7-8692-3166d1ff829c button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-99ac62e7-29bf-4ec7-8692-3166d1ff829c');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ],
      "source": [
        "gnp_per_capita_1998_df_trans = gnp_per_capita_1998_df.T\n",
        "gnp_per_capita_1998_df_trans.head()\n"
      ],
      "id": "4ymsetdSA3hc"
    },
    {
      "cell_type": "markdown",
      "source": [
        "IV.7) Ensuring that the index is reset after the transform"
      ],
      "metadata": {
        "id": "EpfKgIf3Iqe3"
      },
      "id": "EpfKgIf3Iqe3"
    },
    {
      "cell_type": "code",
      "execution_count": 19,
      "metadata": {
        "id": "9K_IJHsZA3hc",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "1d7ecce1-d457-4d1f-f795-3000c4fd39ba"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                         index       1998.0\n",
              "0  Africa Eastern and Southern   693.264194\n",
              "1   Africa Western and Central   463.578133\n",
              "2                       Angola   410.000000\n",
              "3                      Albania   860.000000\n",
              "4                   Arab World  2438.872773"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-cfa4c453-4cef-4cb8-892b-cb5c5eb2d733\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>index</th>\n",
              "      <th>1998.0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Africa Eastern and Southern</td>\n",
              "      <td>693.264194</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Africa Western and Central</td>\n",
              "      <td>463.578133</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Angola</td>\n",
              "      <td>410.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Albania</td>\n",
              "      <td>860.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Arab World</td>\n",
              "      <td>2438.872773</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cfa4c453-4cef-4cb8-892b-cb5c5eb2d733')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-cfa4c453-4cef-4cb8-892b-cb5c5eb2d733 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-cfa4c453-4cef-4cb8-892b-cb5c5eb2d733');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ],
      "source": [
        "gnp_per_capita_1998_df_trans = gnp_per_capita_1998_df_trans.rename(columns=gnp_per_capita_1998_df_trans.iloc[0]).drop(gnp_per_capita_1998_df_trans.index[0])\n",
        "\n",
        "gnp_per_capita_1998_df_trans.reset_index(inplace=True)\n",
        "\n",
        "gnp_per_capita_1998_df_trans.head()"
      ],
      "id": "9K_IJHsZA3hc"
    },
    {
      "cell_type": "markdown",
      "source": [
        "IV.8) Create a new dataframe with Entity and GNP Per Capita as columns to bring the transformed dataframe"
      ],
      "metadata": {
        "id": "P99EsGK1I5Jz"
      },
      "id": "P99EsGK1I5Jz"
    },
    {
      "cell_type": "code",
      "execution_count": 20,
      "metadata": {
        "id": "nB3MlhlIA3hc",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 49
        },
        "outputId": "52ab8271-f0ff-412d-de8e-74d5c2663431"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Empty DataFrame\n",
              "Columns: [Entity, GNP Per Capita]\n",
              "Index: []"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4d413f88-ea98-4d7e-b746-794d3037709f\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Entity</th>\n",
              "      <th>GNP Per Capita</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4d413f88-ea98-4d7e-b746-794d3037709f')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-4d413f88-ea98-4d7e-b746-794d3037709f button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-4d413f88-ea98-4d7e-b746-794d3037709f');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ],
      "source": [
        "data = {'Entity': [], 'GNP Per Capita': []}\n",
        " \n",
        "# Convert the dictionary into DataFrame\n",
        "gnp_per_capita_1998_final = pd.DataFrame(data)\n",
        "gnp_per_capita_1998_final.head()"
      ],
      "id": "nB3MlhlIA3hc"
    },
    {
      "cell_type": "code",
      "execution_count": 21,
      "metadata": {
        "id": "hZntB5qvA3hd",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "81b566a1-e343-45a2-b182-f8bfdac7c621"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                        Entity  GNP Per Capita\n",
              "0  Africa Eastern and Southern      693.264194\n",
              "1   Africa Western and Central      463.578133\n",
              "2                       Angola      410.000000\n",
              "3                      Albania      860.000000\n",
              "4                   Arab World     2438.872773"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c4432a59-e91a-47eb-8f95-d0f28c5f66f4\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Entity</th>\n",
              "      <th>GNP Per Capita</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Africa Eastern and Southern</td>\n",
              "      <td>693.264194</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Africa Western and Central</td>\n",
              "      <td>463.578133</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Angola</td>\n",
              "      <td>410.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Albania</td>\n",
              "      <td>860.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Arab World</td>\n",
              "      <td>2438.872773</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c4432a59-e91a-47eb-8f95-d0f28c5f66f4')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-c4432a59-e91a-47eb-8f95-d0f28c5f66f4 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-c4432a59-e91a-47eb-8f95-d0f28c5f66f4');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ],
      "source": [
        "gnp_per_capita_1998_final['Entity']= gnp_per_capita_1998_df_trans['index']\n",
        "gnp_per_capita_1998_final['GNP Per Capita']= gnp_per_capita_1998_df_trans[1998.0]\n",
        "gnp_per_capita_1998_final.head()"
      ],
      "id": "hZntB5qvA3hd"
    },
    {
      "cell_type": "markdown",
      "source": [
        "IV.9) Merge the new GNP Per Capita dataframe with the share of electricity dataframe on the Entity Column to form our main dataframe of interest"
      ],
      "metadata": {
        "id": "ghCZZhoGJGUQ"
      },
      "id": "ghCZZhoGJGUQ"
    },
    {
      "cell_type": "code",
      "execution_count": 22,
      "metadata": {
        "id": "sBeGuR_rA3hd",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2c5168b0-da42-42fd-e272-62517db877bb"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(69, 12)"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ],
      "source": [
        "clean_gnp_1998 = pd.merge(clean_elec_1998_df, gnp_per_capita_1998_final, on='Entity')\n",
        "clean_gnp_1998.head()\n",
        "np.shape(clean_gnp_1998)"
      ],
      "id": "sBeGuR_rA3hd"
    },
    {
      "cell_type": "markdown",
      "source": [
        "IV.10) Drop NaN values in any row or column to maintain integrity for modeling"
      ],
      "metadata": {
        "id": "viX6OXdaJZu4"
      },
      "id": "viX6OXdaJZu4"
    },
    {
      "cell_type": "code",
      "execution_count": 23,
      "metadata": {
        "id": "Qj0rTYmXA3hd",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "13ca616a-e16f-4e2d-8c25-6f0965efdf32"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(47, 12)"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ],
      "source": [
        "clean_gnp_1998_final = clean_gnp_1998.dropna()\n",
        "clean_gnp_1998_final.head()\n",
        "np.shape(clean_gnp_1998_final)\n"
      ],
      "id": "Qj0rTYmXA3hd"
    },
    {
      "cell_type": "code",
      "source": [
        "clean_gnp_1998_final = clean_gnp_1998_final.sort_values(by=['GNP Per Capita'], ascending=False)\n",
        "\n",
        "clean_gnp_1998_final.head()\n"
      ],
      "metadata": {
        "id": "El3gTmUeUrhp",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 302
        },
        "outputId": "1388077f-3f63-419c-9db6-0e870f4fe0e0"
      },
      "id": "El3gTmUeUrhp",
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           Entity Code  Year  Coal (% electricity)  Gas (% electricity)  \\\n",
              "34     Luxembourg  LUX  1998                 0.000               51.351   \n",
              "42         Norway  NOR  1998                 0.034                0.189   \n",
              "29          Japan  JPN  1998                18.141               21.714   \n",
              "16        Denmark  DNK  1998                57.571               19.791   \n",
              "65  United States  USA  1998                52.623               14.815   \n",
              "\n",
              "    Hydro (% electricity)  Solar (% electricity)  Wind (% electricity)  \\\n",
              "34                 32.432                  0.000                 2.703   \n",
              "42                 99.476                  0.000                 0.009   \n",
              "29                  8.406                  0.014                 0.001   \n",
              "16                  0.073                  0.000                 6.865   \n",
              "65                  8.353                  0.014                 0.079   \n",
              "\n",
              "    Oil (% electricity)  Nuclear (% electricity)  \\\n",
              "34                8.108                    0.000   \n",
              "42                0.060                    0.000   \n",
              "29               18.157                   30.762   \n",
              "16               13.072                    0.000   \n",
              "65                3.592                   18.392   \n",
              "\n",
              "    Other renewables including bioenergy (% electricity)  GNP Per Capita  \n",
              "34                                              5.405            46350.0  \n",
              "42                                              0.232            36100.0  \n",
              "29                                              1.526            35010.0  \n",
              "16                                              2.629            33460.0  \n",
              "65                                              1.702            32020.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-10f42c24-5f52-4cfc-84a2-e96e12fead74\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Entity</th>\n",
              "      <th>Code</th>\n",
              "      <th>Year</th>\n",
              "      <th>Coal (% electricity)</th>\n",
              "      <th>Gas (% electricity)</th>\n",
              "      <th>Hydro (% electricity)</th>\n",
              "      <th>Solar (% electricity)</th>\n",
              "      <th>Wind (% electricity)</th>\n",
              "      <th>Oil (% electricity)</th>\n",
              "      <th>Nuclear (% electricity)</th>\n",
              "      <th>Other renewables including bioenergy (% electricity)</th>\n",
              "      <th>GNP Per Capita</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>34</th>\n",
              "      <td>Luxembourg</td>\n",
              "      <td>LUX</td>\n",
              "      <td>1998</td>\n",
              "      <td>0.000</td>\n",
              "      <td>51.351</td>\n",
              "      <td>32.432</td>\n",
              "      <td>0.000</td>\n",
              "      <td>2.703</td>\n",
              "      <td>8.108</td>\n",
              "      <td>0.000</td>\n",
              "      <td>5.405</td>\n",
              "      <td>46350.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>42</th>\n",
              "      <td>Norway</td>\n",
              "      <td>NOR</td>\n",
              "      <td>1998</td>\n",
              "      <td>0.034</td>\n",
              "      <td>0.189</td>\n",
              "      <td>99.476</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.009</td>\n",
              "      <td>0.060</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.232</td>\n",
              "      <td>36100.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29</th>\n",
              "      <td>Japan</td>\n",
              "      <td>JPN</td>\n",
              "      <td>1998</td>\n",
              "      <td>18.141</td>\n",
              "      <td>21.714</td>\n",
              "      <td>8.406</td>\n",
              "      <td>0.014</td>\n",
              "      <td>0.001</td>\n",
              "      <td>18.157</td>\n",
              "      <td>30.762</td>\n",
              "      <td>1.526</td>\n",
              "      <td>35010.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>Denmark</td>\n",
              "      <td>DNK</td>\n",
              "      <td>1998</td>\n",
              "      <td>57.571</td>\n",
              "      <td>19.791</td>\n",
              "      <td>0.073</td>\n",
              "      <td>0.000</td>\n",
              "      <td>6.865</td>\n",
              "      <td>13.072</td>\n",
              "      <td>0.000</td>\n",
              "      <td>2.629</td>\n",
              "      <td>33460.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>65</th>\n",
              "      <td>United States</td>\n",
              "      <td>USA</td>\n",
              "      <td>1998</td>\n",
              "      <td>52.623</td>\n",
              "      <td>14.815</td>\n",
              "      <td>8.353</td>\n",
              "      <td>0.014</td>\n",
              "      <td>0.079</td>\n",
              "      <td>3.592</td>\n",
              "      <td>18.392</td>\n",
              "      <td>1.702</td>\n",
              "      <td>32020.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-10f42c24-5f52-4cfc-84a2-e96e12fead74')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-10f42c24-5f52-4cfc-84a2-e96e12fead74 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-10f42c24-5f52-4cfc-84a2-e96e12fead74');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "IV.11) Add up Hydro, Solar, Wind and Other renewables including bioenergy to create a new column - Renewables"
      ],
      "metadata": {
        "id": "-_sVye8YOPyV"
      },
      "id": "-_sVye8YOPyV"
    },
    {
      "cell_type": "code",
      "source": [
        "clean_gnp_1998_final['Renewable Energy'] = clean_gnp_1998_final.iloc[:,[5,6,7,10]].sum(axis=1)\n",
        "\n",
        "clean_gnp_1998_final.head()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 302
        },
        "id": "73i1WeWL89S4",
        "outputId": "5bc68dad-de0f-4728-ceee-023aa7818c1a"
      },
      "id": "73i1WeWL89S4",
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           Entity Code  Year  Coal (% electricity)  Gas (% electricity)  \\\n",
              "34     Luxembourg  LUX  1998                 0.000               51.351   \n",
              "42         Norway  NOR  1998                 0.034                0.189   \n",
              "29          Japan  JPN  1998                18.141               21.714   \n",
              "16        Denmark  DNK  1998                57.571               19.791   \n",
              "65  United States  USA  1998                52.623               14.815   \n",
              "\n",
              "    Hydro (% electricity)  Solar (% electricity)  Wind (% electricity)  \\\n",
              "34                 32.432                  0.000                 2.703   \n",
              "42                 99.476                  0.000                 0.009   \n",
              "29                  8.406                  0.014                 0.001   \n",
              "16                  0.073                  0.000                 6.865   \n",
              "65                  8.353                  0.014                 0.079   \n",
              "\n",
              "    Oil (% electricity)  Nuclear (% electricity)  \\\n",
              "34                8.108                    0.000   \n",
              "42                0.060                    0.000   \n",
              "29               18.157                   30.762   \n",
              "16               13.072                    0.000   \n",
              "65                3.592                   18.392   \n",
              "\n",
              "    Other renewables including bioenergy (% electricity)  GNP Per Capita  \\\n",
              "34                                              5.405            46350.0   \n",
              "42                                              0.232            36100.0   \n",
              "29                                              1.526            35010.0   \n",
              "16                                              2.629            33460.0   \n",
              "65                                              1.702            32020.0   \n",
              "\n",
              "    Renewable Energy  \n",
              "34            40.540  \n",
              "42            99.717  \n",
              "29             9.947  \n",
              "16             9.567  \n",
              "65            10.148  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3ad5fa8b-defe-467d-8a5a-7278c8e6868f\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Entity</th>\n",
              "      <th>Code</th>\n",
              "      <th>Year</th>\n",
              "      <th>Coal (% electricity)</th>\n",
              "      <th>Gas (% electricity)</th>\n",
              "      <th>Hydro (% electricity)</th>\n",
              "      <th>Solar (% electricity)</th>\n",
              "      <th>Wind (% electricity)</th>\n",
              "      <th>Oil (% electricity)</th>\n",
              "      <th>Nuclear (% electricity)</th>\n",
              "      <th>Other renewables including bioenergy (% electricity)</th>\n",
              "      <th>GNP Per Capita</th>\n",
              "      <th>Renewable Energy</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>34</th>\n",
              "      <td>Luxembourg</td>\n",
              "      <td>LUX</td>\n",
              "      <td>1998</td>\n",
              "      <td>0.000</td>\n",
              "      <td>51.351</td>\n",
              "      <td>32.432</td>\n",
              "      <td>0.000</td>\n",
              "      <td>2.703</td>\n",
              "      <td>8.108</td>\n",
              "      <td>0.000</td>\n",
              "      <td>5.405</td>\n",
              "      <td>46350.0</td>\n",
              "      <td>40.540</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>42</th>\n",
              "      <td>Norway</td>\n",
              "      <td>NOR</td>\n",
              "      <td>1998</td>\n",
              "      <td>0.034</td>\n",
              "      <td>0.189</td>\n",
              "      <td>99.476</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.009</td>\n",
              "      <td>0.060</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.232</td>\n",
              "      <td>36100.0</td>\n",
              "      <td>99.717</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29</th>\n",
              "      <td>Japan</td>\n",
              "      <td>JPN</td>\n",
              "      <td>1998</td>\n",
              "      <td>18.141</td>\n",
              "      <td>21.714</td>\n",
              "      <td>8.406</td>\n",
              "      <td>0.014</td>\n",
              "      <td>0.001</td>\n",
              "      <td>18.157</td>\n",
              "      <td>30.762</td>\n",
              "      <td>1.526</td>\n",
              "      <td>35010.0</td>\n",
              "      <td>9.947</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>Denmark</td>\n",
              "      <td>DNK</td>\n",
              "      <td>1998</td>\n",
              "      <td>57.571</td>\n",
              "      <td>19.791</td>\n",
              "      <td>0.073</td>\n",
              "      <td>0.000</td>\n",
              "      <td>6.865</td>\n",
              "      <td>13.072</td>\n",
              "      <td>0.000</td>\n",
              "      <td>2.629</td>\n",
              "      <td>33460.0</td>\n",
              "      <td>9.567</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>65</th>\n",
              "      <td>United States</td>\n",
              "      <td>USA</td>\n",
              "      <td>1998</td>\n",
              "      <td>52.623</td>\n",
              "      <td>14.815</td>\n",
              "      <td>8.353</td>\n",
              "      <td>0.014</td>\n",
              "      <td>0.079</td>\n",
              "      <td>3.592</td>\n",
              "      <td>18.392</td>\n",
              "      <td>1.702</td>\n",
              "      <td>32020.0</td>\n",
              "      <td>10.148</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3ad5fa8b-defe-467d-8a5a-7278c8e6868f')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-3ad5fa8b-defe-467d-8a5a-7278c8e6868f button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-3ad5fa8b-defe-467d-8a5a-7278c8e6868f');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# V. Analyze GHG Emissions per capita by sector"
      ],
      "metadata": {
        "id": "cAwq6FLpUP3w"
      },
      "id": "cAwq6FLpUP3w"
    },
    {
      "cell_type": "markdown",
      "source": [
        "V.1) Upload the per capita GHG Emissions by sector data"
      ],
      "metadata": {
        "id": "2fOp9STRU6Ll"
      },
      "id": "2fOp9STRU6Ll"
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import files\n",
        " \n",
        " \n",
        "uploaded = files.upload()"
      ],
      "metadata": {
        "colab": {
          "resources": {
            "http://localhost:8080/nbextensions/google.colab/files.js": {
              "data": "Ly8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQwovLwovLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgovLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKLy8KLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKLy8KLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQovLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAovLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAovLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCi8qKgogKiBAZmlsZW92ZXJ2aWV3IEhlbHBlcnMgZm9yIGdvb2dsZS5jb2xhYiBQeXRob24gbW9kdWxlLgogKi8KKGZ1bmN0aW9uKHNjb3BlKSB7CmZ1bmN0aW9uIHNwYW4odGV4dCwgc3R5bGVBdHRyaWJ1dGVzID0ge30pIHsKICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0OwogIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHN0eWxlQXR0cmlidXRlcykpIHsKICAgIGVsZW1lbnQuc3R5bGVba2V5XSA9IHN0eWxlQXR0cmlidXRlc1trZXldOwogIH0KICByZXR1cm4gZWxlbWVudDsKfQoKLy8gTWF4IG51bWJlciBvZiBieXRlcyB3aGljaCB3aWxsIGJlIHVwbG9hZGVkIGF0IGEgdGltZS4KY29uc3QgTUFYX1BBWUxPQURfU0laRSA9IDEwMCAqIDEwMjQ7CgpmdW5jdGlvbiBfdXBsb2FkRmlsZXMoaW5wdXRJZCwgb3V0cHV0SWQpIHsKICBjb25zdCBzdGVwcyA9IHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCk7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICAvLyBDYWNoZSBzdGVwcyBvbiB0aGUgb3V0cHV0RWxlbWVudCB0byBtYWtlIGl0IGF2YWlsYWJsZSBmb3IgdGhlIG5leHQgY2FsbAogIC8vIHRvIHVwbG9hZEZpbGVzQ29udGludWUgZnJvbSBQeXRob24uCiAgb3V0cHV0RWxlbWVudC5zdGVwcyA9IHN0ZXBzOwoKICByZXR1cm4gX3VwbG9hZEZpbGVzQ29udGludWUob3V0cHV0SWQpOwp9CgovLyBUaGlzIGlzIHJvdWdobHkgYW4gYXN5bmMgZ2VuZXJhdG9yIChub3Qgc3VwcG9ydGVkIGluIHRoZSBicm93c2VyIHlldCksCi8vIHdoZXJlIHRoZXJlIGFyZSBtdWx0aXBsZSBhc3luY2hyb25vdXMgc3RlcHMgYW5kIHRoZSBQeXRob24gc2lkZSBpcyBnb2luZwovLyB0byBwb2xsIGZvciBjb21wbGV0aW9uIG9mIGVhY2ggc3RlcC4KLy8gVGhpcyB1c2VzIGEgUHJvbWlzZSB0byBibG9jayB0aGUgcHl0aG9uIHNpZGUgb24gY29tcGxldGlvbiBvZiBlYWNoIHN0ZXAsCi8vIHRoZW4gcGFzc2VzIHRoZSByZXN1bHQgb2YgdGhlIHByZXZpb3VzIHN0ZXAgYXMgdGhlIGlucHV0IHRvIHRoZSBuZXh0IHN0ZXAuCmZ1bmN0aW9uIF91cGxvYWRGaWxlc0NvbnRpbnVlKG91dHB1dElkKSB7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICBjb25zdCBzdGVwcyA9IG91dHB1dEVsZW1lbnQuc3RlcHM7CgogIGNvbnN0IG5leHQgPSBzdGVwcy5uZXh0KG91dHB1dEVsZW1lbnQubGFzdFByb21pc2VWYWx1ZSk7CiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXh0LnZhbHVlLnByb21pc2UpLnRoZW4oKHZhbHVlKSA9PiB7CiAgICAvLyBDYWNoZSB0aGUgbGFzdCBwcm9taXNlIHZhbHVlIHRvIG1ha2UgaXQgYXZhaWxhYmxlIHRvIHRoZSBuZXh0CiAgICAvLyBzdGVwIG9mIHRoZSBnZW5lcmF0b3IuCiAgICBvdXRwdXRFbGVtZW50Lmxhc3RQcm9taXNlVmFsdWUgPSB2YWx1ZTsKICAgIHJldHVybiBuZXh0LnZhbHVlLnJlc3BvbnNlOwogIH0pOwp9CgovKioKICogR2VuZXJhdG9yIGZ1bmN0aW9uIHdoaWNoIGlzIGNhbGxlZCBiZXR3ZWVuIGVhY2ggYXN5bmMgc3RlcCBvZiB0aGUgdXBsb2FkCiAqIHByb2Nlc3MuCiAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dElkIEVsZW1lbnQgSUQgb2YgdGhlIGlucHV0IGZpbGUgcGlja2VyIGVsZW1lbnQuCiAqIEBwYXJhbSB7c3RyaW5nfSBvdXRwdXRJZCBFbGVtZW50IElEIG9mIHRoZSBvdXRwdXQgZGlzcGxheS4KICogQHJldHVybiB7IUl0ZXJhYmxlPCFPYmplY3Q+fSBJdGVyYWJsZSBvZiBuZXh0IHN0ZXBzLgogKi8KZnVuY3Rpb24qIHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCkgewogIGNvbnN0IGlucHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlucHV0SWQpOwogIGlucHV0RWxlbWVudC5kaXNhYmxlZCA9IGZhbHNlOwoKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIG91dHB1dEVsZW1lbnQuaW5uZXJIVE1MID0gJyc7CgogIGNvbnN0IHBpY2tlZFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgaW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlKSA9PiB7CiAgICAgIHJlc29sdmUoZS50YXJnZXQuZmlsZXMpOwogICAgfSk7CiAgfSk7CgogIGNvbnN0IGNhbmNlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpOwogIGlucHV0RWxlbWVudC5wYXJlbnRFbGVtZW50LmFwcGVuZENoaWxkKGNhbmNlbCk7CiAgY2FuY2VsLnRleHRDb250ZW50ID0gJ0NhbmNlbCB1cGxvYWQnOwogIGNvbnN0IGNhbmNlbFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgY2FuY2VsLm9uY2xpY2sgPSAoKSA9PiB7CiAgICAgIHJlc29sdmUobnVsbCk7CiAgICB9OwogIH0pOwoKICAvLyBXYWl0IGZvciB0aGUgdXNlciB0byBwaWNrIHRoZSBmaWxlcy4KICBjb25zdCBmaWxlcyA9IHlpZWxkIHsKICAgIHByb21pc2U6IFByb21pc2UucmFjZShbcGlja2VkUHJvbWlzZSwgY2FuY2VsUHJvbWlzZV0pLAogICAgcmVzcG9uc2U6IHsKICAgICAgYWN0aW9uOiAnc3RhcnRpbmcnLAogICAgfQogIH07CgogIGNhbmNlbC5yZW1vdmUoKTsKCiAgLy8gRGlzYWJsZSB0aGUgaW5wdXQgZWxlbWVudCBzaW5jZSBmdXJ0aGVyIHBpY2tzIGFyZSBub3QgYWxsb3dlZC4KICBpbnB1dEVsZW1lbnQuZGlzYWJsZWQgPSB0cnVlOwoKICBpZiAoIWZpbGVzKSB7CiAgICByZXR1cm4gewogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbXBsZXRlJywKICAgICAgfQogICAgfTsKICB9CgogIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykgewogICAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpOwogICAgbGkuYXBwZW5kKHNwYW4oZmlsZS5uYW1lLCB7Zm9udFdlaWdodDogJ2JvbGQnfSkpOwogICAgbGkuYXBwZW5kKHNwYW4oCiAgICAgICAgYCgke2ZpbGUudHlwZSB8fCAnbi9hJ30pIC0gJHtmaWxlLnNpemV9IGJ5dGVzLCBgICsKICAgICAgICBgbGFzdCBtb2RpZmllZDogJHsKICAgICAgICAgICAgZmlsZS5sYXN0TW9kaWZpZWREYXRlID8gZmlsZS5sYXN0TW9kaWZpZWREYXRlLnRvTG9jYWxlRGF0ZVN0cmluZygpIDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ24vYSd9IC0gYCkpOwogICAgY29uc3QgcGVyY2VudCA9IHNwYW4oJzAlIGRvbmUnKTsKICAgIGxpLmFwcGVuZENoaWxkKHBlcmNlbnQpOwoKICAgIG91dHB1dEVsZW1lbnQuYXBwZW5kQ2hpbGQobGkpOwoKICAgIGNvbnN0IGZpbGVEYXRhUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7CiAgICAgIHJlYWRlci5vbmxvYWQgPSAoZSkgPT4gewogICAgICAgIHJlc29sdmUoZS50YXJnZXQucmVzdWx0KTsKICAgICAgfTsKICAgICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGZpbGUpOwogICAgfSk7CiAgICAvLyBXYWl0IGZvciB0aGUgZGF0YSB0byBiZSByZWFkeS4KICAgIGxldCBmaWxlRGF0YSA9IHlpZWxkIHsKICAgICAgcHJvbWlzZTogZmlsZURhdGFQcm9taXNlLAogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbnRpbnVlJywKICAgICAgfQogICAgfTsKCiAgICAvLyBVc2UgYSBjaHVua2VkIHNlbmRpbmcgdG8gYXZvaWQgbWVzc2FnZSBzaXplIGxpbWl0cy4gU2VlIGIvNjIxMTU2NjAuCiAgICBsZXQgcG9zaXRpb24gPSAwOwogICAgZG8gewogICAgICBjb25zdCBsZW5ndGggPSBNYXRoLm1pbihmaWxlRGF0YS5ieXRlTGVuZ3RoIC0gcG9zaXRpb24sIE1BWF9QQVlMT0FEX1NJWkUpOwogICAgICBjb25zdCBjaHVuayA9IG5ldyBVaW50OEFycmF5KGZpbGVEYXRhLCBwb3NpdGlvbiwgbGVuZ3RoKTsKICAgICAgcG9zaXRpb24gKz0gbGVuZ3RoOwoKICAgICAgY29uc3QgYmFzZTY0ID0gYnRvYShTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGNodW5rKSk7CiAgICAgIHlpZWxkIHsKICAgICAgICByZXNwb25zZTogewogICAgICAgICAgYWN0aW9uOiAnYXBwZW5kJywKICAgICAgICAgIGZpbGU6IGZpbGUubmFtZSwKICAgICAgICAgIGRhdGE6IGJhc2U2NCwKICAgICAgICB9LAogICAgICB9OwoKICAgICAgbGV0IHBlcmNlbnREb25lID0gZmlsZURhdGEuYnl0ZUxlbmd0aCA9PT0gMCA/CiAgICAgICAgICAxMDAgOgogICAgICAgICAgTWF0aC5yb3VuZCgocG9zaXRpb24gLyBmaWxlRGF0YS5ieXRlTGVuZ3RoKSAqIDEwMCk7CiAgICAgIHBlcmNlbnQudGV4dENvbnRlbnQgPSBgJHtwZXJjZW50RG9uZX0lIGRvbmVgOwoKICAgIH0gd2hpbGUgKHBvc2l0aW9uIDwgZmlsZURhdGEuYnl0ZUxlbmd0aCk7CiAgfQoKICAvLyBBbGwgZG9uZS4KICB5aWVsZCB7CiAgICByZXNwb25zZTogewogICAgICBhY3Rpb246ICdjb21wbGV0ZScsCiAgICB9CiAgfTsKfQoKc2NvcGUuZ29vZ2xlID0gc2NvcGUuZ29vZ2xlIHx8IHt9OwpzY29wZS5nb29nbGUuY29sYWIgPSBzY29wZS5nb29nbGUuY29sYWIgfHwge307CnNjb3BlLmdvb2dsZS5jb2xhYi5fZmlsZXMgPSB7CiAgX3VwbG9hZEZpbGVzLAogIF91cGxvYWRGaWxlc0NvbnRpbnVlLAp9Owp9KShzZWxmKTsK",
              "ok": true,
              "headers": [
                [
                  "content-type",
                  "application/javascript"
                ]
              ],
              "status": 200,
              "status_text": ""
            }
          },
          "base_uri": "https://localhost:8080/",
          "height": 74
        },
        "id": "6ubtSbiLp-SD",
        "outputId": "7998c0ad-f63a-4a14-c16e-08f05d9388c3"
      },
      "id": "6ubtSbiLp-SD",
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-6b128711-473f-4cbc-83d5-3a9a0d6b3cb2\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-6b128711-473f-4cbc-83d5-3a9a0d6b3cb2\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script src=\"/nbextensions/google.colab/files.js\"></script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving per-capita-ghg-sector.csv to per-capita-ghg-sector.csv\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "V.2) Limit the data to the period 1998-2018"
      ],
      "metadata": {
        "id": "hNS72d23VBRq"
      },
      "id": "hNS72d23VBRq"
    },
    {
      "cell_type": "code",
      "source": [
        "import io\n",
        " \n",
        "per_capita_ghg_sector_df = pd.read_csv(io.BytesIO(uploaded['per-capita-ghg-sector.csv']))\n",
        "per_capita_ghg_sector_df.drop(per_capita_ghg_sector_df[per_capita_ghg_sector_df.Year < 1998].index, inplace = True)\n",
        "per_capita_ghg_sector_df.drop(per_capita_ghg_sector_df[per_capita_ghg_sector_df.Year > 2018].index, inplace = True)\n",
        "per_capita_ghg_sector_df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 285
        },
        "id": "866_WcyiqlsE",
        "outputId": "849cf623-8eac-402f-8295-50b4691a527a"
      },
      "id": "866_WcyiqlsE",
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         Entity Code  Year  Aviation and shipping (per capita)  \\\n",
              "8   Afghanistan  AFG  1998                            0.001013   \n",
              "9   Afghanistan  AFG  1999                            0.000992   \n",
              "10  Afghanistan  AFG  2000                            0.000962   \n",
              "11  Afghanistan  AFG  2001                            0.000926   \n",
              "12  Afghanistan  AFG  2002                            0.000885   \n",
              "\n",
              "    Land-use change and forestry (per capita)  \\\n",
              "8                                   -0.121088   \n",
              "9                                   -0.118488   \n",
              "10                                  -0.115015   \n",
              "11                                   0.005554   \n",
              "12                                   0.005310   \n",
              "\n",
              "    Manufacturing and construction (per capita)  \\\n",
              "8                                      0.014186   \n",
              "9                                      0.012394   \n",
              "10                                     0.011068   \n",
              "11                                     0.010645   \n",
              "12                                     0.024778   \n",
              "\n",
              "    Fugitive emissions (per capita)  Agriculture (per capita)  \\\n",
              "8                          0.004560                  0.595305   \n",
              "9                          0.004462                  0.634083   \n",
              "10                         0.004331                  0.528875   \n",
              "11                         0.003703                  0.429491   \n",
              "12                         0.003540                  0.510160   \n",
              "\n",
              "    Buildings (per capita)  Electricity and heat (per capita)  \\\n",
              "8                 0.000507                           0.008106   \n",
              "9                 0.000496                           0.007932   \n",
              "10                0.000000                           0.007700   \n",
              "11                0.000000                           0.008331   \n",
              "12                0.000000                           0.006637   \n",
              "\n",
              "    Industry (per capita)  Transport (per capita)  Waste (per capita)  \n",
              "8                0.005573                0.027865            0.093222  \n",
              "9                0.005949                0.017352            0.094195  \n",
              "10               0.005294                0.017324            0.094322  \n",
              "11               0.005554                0.017587            0.094877  \n",
              "12               0.005310                0.015929            0.095129  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-fceaf670-6805-46d8-89cd-550c1bf3f697\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Entity</th>\n",
              "      <th>Code</th>\n",
              "      <th>Year</th>\n",
              "      <th>Aviation and shipping (per capita)</th>\n",
              "      <th>Land-use change and forestry (per capita)</th>\n",
              "      <th>Manufacturing and construction (per capita)</th>\n",
              "      <th>Fugitive emissions (per capita)</th>\n",
              "      <th>Agriculture (per capita)</th>\n",
              "      <th>Buildings (per capita)</th>\n",
              "      <th>Electricity and heat (per capita)</th>\n",
              "      <th>Industry (per capita)</th>\n",
              "      <th>Transport (per capita)</th>\n",
              "      <th>Waste (per capita)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>AFG</td>\n",
              "      <td>1998</td>\n",
              "      <td>0.001013</td>\n",
              "      <td>-0.121088</td>\n",
              "      <td>0.014186</td>\n",
              "      <td>0.004560</td>\n",
              "      <td>0.595305</td>\n",
              "      <td>0.000507</td>\n",
              "      <td>0.008106</td>\n",
              "      <td>0.005573</td>\n",
              "      <td>0.027865</td>\n",
              "      <td>0.093222</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>AFG</td>\n",
              "      <td>1999</td>\n",
              "      <td>0.000992</td>\n",
              "      <td>-0.118488</td>\n",
              "      <td>0.012394</td>\n",
              "      <td>0.004462</td>\n",
              "      <td>0.634083</td>\n",
              "      <td>0.000496</td>\n",
              "      <td>0.007932</td>\n",
              "      <td>0.005949</td>\n",
              "      <td>0.017352</td>\n",
              "      <td>0.094195</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>AFG</td>\n",
              "      <td>2000</td>\n",
              "      <td>0.000962</td>\n",
              "      <td>-0.115015</td>\n",
              "      <td>0.011068</td>\n",
              "      <td>0.004331</td>\n",
              "      <td>0.528875</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.007700</td>\n",
              "      <td>0.005294</td>\n",
              "      <td>0.017324</td>\n",
              "      <td>0.094322</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>AFG</td>\n",
              "      <td>2001</td>\n",
              "      <td>0.000926</td>\n",
              "      <td>0.005554</td>\n",
              "      <td>0.010645</td>\n",
              "      <td>0.003703</td>\n",
              "      <td>0.429491</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.008331</td>\n",
              "      <td>0.005554</td>\n",
              "      <td>0.017587</td>\n",
              "      <td>0.094877</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>AFG</td>\n",
              "      <td>2002</td>\n",
              "      <td>0.000885</td>\n",
              "      <td>0.005310</td>\n",
              "      <td>0.024778</td>\n",
              "      <td>0.003540</td>\n",
              "      <td>0.510160</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.006637</td>\n",
              "      <td>0.005310</td>\n",
              "      <td>0.015929</td>\n",
              "      <td>0.095129</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fceaf670-6805-46d8-89cd-550c1bf3f697')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-fceaf670-6805-46d8-89cd-550c1bf3f697 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-fceaf670-6805-46d8-89cd-550c1bf3f697');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "V.3) Assimilate the per capita emissions which can be mitigated by renewable energy - Manufacturing, Fugitive, Buildings, Electricity, Industry, Transport, Waste"
      ],
      "metadata": {
        "id": "bmTKIWeMVIpn"
      },
      "id": "bmTKIWeMVIpn"
    },
    {
      "cell_type": "code",
      "source": [
        "per_capita_ghg_sector_1998_df = per_capita_ghg_sector_df[per_capita_ghg_sector_df['Year'] == 1998].copy()\n",
        "per_capita_ghg_sector_1998_df.dropna(axis=0, how='any', inplace=True)\n",
        "per_capita_ghg_sector_1998_df['GHG Emissions per Capita'] = per_capita_ghg_sector_1998_df.iloc[:,[5,6,8,9,10,11,12]].sum(axis=1)\n",
        "per_capita_ghg_sector_1998_df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 337
        },
        "id": "uu2A6-c_t7xL",
        "outputId": "74523ac7-0067-4ca2-d6b8-a002918f8f76"
      },
      "id": "uu2A6-c_t7xL",
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                  Entity Code  Year  Aviation and shipping (per capita)  \\\n",
              "8            Afghanistan  AFG  1998                            0.001013   \n",
              "37               Albania  ALB  1998                            0.000000   \n",
              "66               Algeria  DZA  1998                            0.058623   \n",
              "124               Angola  AGO  1998                            0.044272   \n",
              "153  Antigua and Barbuda  ATG  1998                            3.141261   \n",
              "\n",
              "     Land-use change and forestry (per capita)  \\\n",
              "8                                    -0.121088   \n",
              "37                                    0.067509   \n",
              "66                                    0.021528   \n",
              "124                                   1.967499   \n",
              "153                                   0.000000   \n",
              "\n",
              "     Manufacturing and construction (per capita)  \\\n",
              "8                                       0.014186   \n",
              "37                                      0.128588   \n",
              "66                                      0.187462   \n",
              "124                                     0.084638   \n",
              "153                                     0.000000   \n",
              "\n",
              "     Fugitive emissions (per capita)  Agriculture (per capita)  \\\n",
              "8                           0.004560                  0.595305   \n",
              "37                          0.003215                  1.173370   \n",
              "66                          1.139346                  0.276225   \n",
              "124                         0.966171                  1.931040   \n",
              "153                         0.000000                  0.546306   \n",
              "\n",
              "     Buildings (per capita)  Electricity and heat (per capita)  \\\n",
              "8                  0.000507                           0.008106   \n",
              "37                 0.077153                           0.106085   \n",
              "66                 0.285830                           0.919757   \n",
              "124                0.065106                           0.038412   \n",
              "153                0.136577                           2.185225   \n",
              "\n",
              "     Industry (per capita)  Transport (per capita)  Waste (per capita)  \\\n",
              "8                 0.005573                0.027865            0.093222   \n",
              "37                0.041791                0.237889            0.302183   \n",
              "66                0.134801                0.512043            0.281856   \n",
              "124               0.012370                0.054038            0.044923   \n",
              "153               0.682883                2.185225            1.912072   \n",
              "\n",
              "     GHG Emissions per Capita  \n",
              "8                    0.154019  \n",
              "37                   0.896905  \n",
              "66                   3.461096  \n",
              "124                  1.265658  \n",
              "153                  7.101982  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5a77e47b-dc58-4173-9fb5-5da4d75abf51\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Entity</th>\n",
              "      <th>Code</th>\n",
              "      <th>Year</th>\n",
              "      <th>Aviation and shipping (per capita)</th>\n",
              "      <th>Land-use change and forestry (per capita)</th>\n",
              "      <th>Manufacturing and construction (per capita)</th>\n",
              "      <th>Fugitive emissions (per capita)</th>\n",
              "      <th>Agriculture (per capita)</th>\n",
              "      <th>Buildings (per capita)</th>\n",
              "      <th>Electricity and heat (per capita)</th>\n",
              "      <th>Industry (per capita)</th>\n",
              "      <th>Transport (per capita)</th>\n",
              "      <th>Waste (per capita)</th>\n",
              "      <th>GHG Emissions per Capita</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>AFG</td>\n",
              "      <td>1998</td>\n",
              "      <td>0.001013</td>\n",
              "      <td>-0.121088</td>\n",
              "      <td>0.014186</td>\n",
              "      <td>0.004560</td>\n",
              "      <td>0.595305</td>\n",
              "      <td>0.000507</td>\n",
              "      <td>0.008106</td>\n",
              "      <td>0.005573</td>\n",
              "      <td>0.027865</td>\n",
              "      <td>0.093222</td>\n",
              "      <td>0.154019</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>37</th>\n",
              "      <td>Albania</td>\n",
              "      <td>ALB</td>\n",
              "      <td>1998</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.067509</td>\n",
              "      <td>0.128588</td>\n",
              "      <td>0.003215</td>\n",
              "      <td>1.173370</td>\n",
              "      <td>0.077153</td>\n",
              "      <td>0.106085</td>\n",
              "      <td>0.041791</td>\n",
              "      <td>0.237889</td>\n",
              "      <td>0.302183</td>\n",
              "      <td>0.896905</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>66</th>\n",
              "      <td>Algeria</td>\n",
              "      <td>DZA</td>\n",
              "      <td>1998</td>\n",
              "      <td>0.058623</td>\n",
              "      <td>0.021528</td>\n",
              "      <td>0.187462</td>\n",
              "      <td>1.139346</td>\n",
              "      <td>0.276225</td>\n",
              "      <td>0.285830</td>\n",
              "      <td>0.919757</td>\n",
              "      <td>0.134801</td>\n",
              "      <td>0.512043</td>\n",
              "      <td>0.281856</td>\n",
              "      <td>3.461096</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>124</th>\n",
              "      <td>Angola</td>\n",
              "      <td>AGO</td>\n",
              "      <td>1998</td>\n",
              "      <td>0.044272</td>\n",
              "      <td>1.967499</td>\n",
              "      <td>0.084638</td>\n",
              "      <td>0.966171</td>\n",
              "      <td>1.931040</td>\n",
              "      <td>0.065106</td>\n",
              "      <td>0.038412</td>\n",
              "      <td>0.012370</td>\n",
              "      <td>0.054038</td>\n",
              "      <td>0.044923</td>\n",
              "      <td>1.265658</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>153</th>\n",
              "      <td>Antigua and Barbuda</td>\n",
              "      <td>ATG</td>\n",
              "      <td>1998</td>\n",
              "      <td>3.141261</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.546306</td>\n",
              "      <td>0.136577</td>\n",
              "      <td>2.185225</td>\n",
              "      <td>0.682883</td>\n",
              "      <td>2.185225</td>\n",
              "      <td>1.912072</td>\n",
              "      <td>7.101982</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5a77e47b-dc58-4173-9fb5-5da4d75abf51')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-5a77e47b-dc58-4173-9fb5-5da4d75abf51 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-5a77e47b-dc58-4173-9fb5-5da4d75abf51');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "V.4) Merge Share of Electricity (paired with GNP Per Capita) with GHG Emissions per Capita by Sector along Entity, Code and Year"
      ],
      "metadata": {
        "id": "JAsX4yXMYWwS"
      },
      "id": "JAsX4yXMYWwS"
    },
    {
      "cell_type": "code",
      "source": [
        "clean_gnp_1998_ghg = pd.merge(clean_gnp_1998_final, per_capita_ghg_sector_1998_df, on=['Entity', 'Code', 'Year'], how='left')\n",
        "clean_gnp_1998_ghg.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 404
        },
        "id": "7l2VdS3ExhII",
        "outputId": "adb1faa4-4a7a-4f96-d965-36f9e2e772cb"
      },
      "id": "7l2VdS3ExhII",
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          Entity Code  Year  Coal (% electricity)  Gas (% electricity)  \\\n",
              "0     Luxembourg  LUX  1998                 0.000               51.351   \n",
              "1         Norway  NOR  1998                 0.034                0.189   \n",
              "2          Japan  JPN  1998                18.141               21.714   \n",
              "3        Denmark  DNK  1998                57.571               19.791   \n",
              "4  United States  USA  1998                52.623               14.815   \n",
              "\n",
              "   Hydro (% electricity)  Solar (% electricity)  Wind (% electricity)  \\\n",
              "0                 32.432                  0.000                 2.703   \n",
              "1                 99.476                  0.000                 0.009   \n",
              "2                  8.406                  0.014                 0.001   \n",
              "3                  0.073                  0.000                 6.865   \n",
              "4                  8.353                  0.014                 0.079   \n",
              "\n",
              "   Oil (% electricity)  Nuclear (% electricity)  ...  \\\n",
              "0                8.108                    0.000  ...   \n",
              "1                0.060                    0.000  ...   \n",
              "2               18.157                   30.762  ...   \n",
              "3               13.072                    0.000  ...   \n",
              "4                3.592                   18.392  ...   \n",
              "\n",
              "   Land-use change and forestry (per capita)  \\\n",
              "0                                  -1.502954   \n",
              "1                                  -3.386183   \n",
              "2                                  -0.595906   \n",
              "3                                   0.064146   \n",
              "4                                  -1.510383   \n",
              "\n",
              "   Manufacturing and construction (per capita)  \\\n",
              "0                                     3.499065   \n",
              "1                                     1.344580   \n",
              "2                                     1.834209   \n",
              "3                                     1.065961   \n",
              "4                                     1.863503   \n",
              "\n",
              "   Fugitive emissions (per capita)  Agriculture (per capita)  \\\n",
              "0                         0.070451                  1.549922   \n",
              "1                         0.400226                  1.250145   \n",
              "2                         0.032096                  0.203670   \n",
              "3                         0.128293                  2.211162   \n",
              "4                         1.153156                  1.371126   \n",
              "\n",
              "   Buildings (per capita)  Electricity and heat (per capita)  \\\n",
              "0                3.663451                           0.375739   \n",
              "1                0.422711                           2.974715   \n",
              "2                1.106300                           3.475841   \n",
              "3                1.050868                           6.144842   \n",
              "4                1.993565                          10.175877   \n",
              "\n",
              "   Industry (per capita)  Transport (per capita)  Waste (per capita)  \\\n",
              "0               1.174183                8.970758            0.258320   \n",
              "1               1.166952                2.851050            0.420462   \n",
              "2               0.662144                2.038273            0.101402   \n",
              "3               0.507511                2.263989            0.260359   \n",
              "4               0.762096                5.961145            0.631670   \n",
              "\n",
              "   GHG Emissions per Capita  \n",
              "0                 18.011967  \n",
              "1                  9.580696  \n",
              "2                  9.250265  \n",
              "3                 11.421823  \n",
              "4                 22.541012  \n",
              "\n",
              "[5 rows x 24 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9f02d8a1-e50c-4722-8df7-099096de4eb4\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Entity</th>\n",
              "      <th>Code</th>\n",
              "      <th>Year</th>\n",
              "      <th>Coal (% electricity)</th>\n",
              "      <th>Gas (% electricity)</th>\n",
              "      <th>Hydro (% electricity)</th>\n",
              "      <th>Solar (% electricity)</th>\n",
              "      <th>Wind (% electricity)</th>\n",
              "      <th>Oil (% electricity)</th>\n",
              "      <th>Nuclear (% electricity)</th>\n",
              "      <th>...</th>\n",
              "      <th>Land-use change and forestry (per capita)</th>\n",
              "      <th>Manufacturing and construction (per capita)</th>\n",
              "      <th>Fugitive emissions (per capita)</th>\n",
              "      <th>Agriculture (per capita)</th>\n",
              "      <th>Buildings (per capita)</th>\n",
              "      <th>Electricity and heat (per capita)</th>\n",
              "      <th>Industry (per capita)</th>\n",
              "      <th>Transport (per capita)</th>\n",
              "      <th>Waste (per capita)</th>\n",
              "      <th>GHG Emissions per Capita</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Luxembourg</td>\n",
              "      <td>LUX</td>\n",
              "      <td>1998</td>\n",
              "      <td>0.000</td>\n",
              "      <td>51.351</td>\n",
              "      <td>32.432</td>\n",
              "      <td>0.000</td>\n",
              "      <td>2.703</td>\n",
              "      <td>8.108</td>\n",
              "      <td>0.000</td>\n",
              "      <td>...</td>\n",
              "      <td>-1.502954</td>\n",
              "      <td>3.499065</td>\n",
              "      <td>0.070451</td>\n",
              "      <td>1.549922</td>\n",
              "      <td>3.663451</td>\n",
              "      <td>0.375739</td>\n",
              "      <td>1.174183</td>\n",
              "      <td>8.970758</td>\n",
              "      <td>0.258320</td>\n",
              "      <td>18.011967</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Norway</td>\n",
              "      <td>NOR</td>\n",
              "      <td>1998</td>\n",
              "      <td>0.034</td>\n",
              "      <td>0.189</td>\n",
              "      <td>99.476</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.009</td>\n",
              "      <td>0.060</td>\n",
              "      <td>0.000</td>\n",
              "      <td>...</td>\n",
              "      <td>-3.386183</td>\n",
              "      <td>1.344580</td>\n",
              "      <td>0.400226</td>\n",
              "      <td>1.250145</td>\n",
              "      <td>0.422711</td>\n",
              "      <td>2.974715</td>\n",
              "      <td>1.166952</td>\n",
              "      <td>2.851050</td>\n",
              "      <td>0.420462</td>\n",
              "      <td>9.580696</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Japan</td>\n",
              "      <td>JPN</td>\n",
              "      <td>1998</td>\n",
              "      <td>18.141</td>\n",
              "      <td>21.714</td>\n",
              "      <td>8.406</td>\n",
              "      <td>0.014</td>\n",
              "      <td>0.001</td>\n",
              "      <td>18.157</td>\n",
              "      <td>30.762</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.595906</td>\n",
              "      <td>1.834209</td>\n",
              "      <td>0.032096</td>\n",
              "      <td>0.203670</td>\n",
              "      <td>1.106300</td>\n",
              "      <td>3.475841</td>\n",
              "      <td>0.662144</td>\n",
              "      <td>2.038273</td>\n",
              "      <td>0.101402</td>\n",
              "      <td>9.250265</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Denmark</td>\n",
              "      <td>DNK</td>\n",
              "      <td>1998</td>\n",
              "      <td>57.571</td>\n",
              "      <td>19.791</td>\n",
              "      <td>0.073</td>\n",
              "      <td>0.000</td>\n",
              "      <td>6.865</td>\n",
              "      <td>13.072</td>\n",
              "      <td>0.000</td>\n",
              "      <td>...</td>\n",
              "      <td>0.064146</td>\n",
              "      <td>1.065961</td>\n",
              "      <td>0.128293</td>\n",
              "      <td>2.211162</td>\n",
              "      <td>1.050868</td>\n",
              "      <td>6.144842</td>\n",
              "      <td>0.507511</td>\n",
              "      <td>2.263989</td>\n",
              "      <td>0.260359</td>\n",
              "      <td>11.421823</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>United States</td>\n",
              "      <td>USA</td>\n",
              "      <td>1998</td>\n",
              "      <td>52.623</td>\n",
              "      <td>14.815</td>\n",
              "      <td>8.353</td>\n",
              "      <td>0.014</td>\n",
              "      <td>0.079</td>\n",
              "      <td>3.592</td>\n",
              "      <td>18.392</td>\n",
              "      <td>...</td>\n",
              "      <td>-1.510383</td>\n",
              "      <td>1.863503</td>\n",
              "      <td>1.153156</td>\n",
              "      <td>1.371126</td>\n",
              "      <td>1.993565</td>\n",
              "      <td>10.175877</td>\n",
              "      <td>0.762096</td>\n",
              "      <td>5.961145</td>\n",
              "      <td>0.631670</td>\n",
              "      <td>22.541012</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 24 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9f02d8a1-e50c-4722-8df7-099096de4eb4')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-9f02d8a1-e50c-4722-8df7-099096de4eb4 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-9f02d8a1-e50c-4722-8df7-099096de4eb4');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# VI. Income Category and Country Classification based on World Bank Definitions"
      ],
      "metadata": {
        "id": "zvYSU6DCY9g0"
      },
      "id": "zvYSU6DCY9g0"
    },
    {
      "cell_type": "markdown",
      "source": [
        "VI.1) Prior to understanding how countries across income categories performed on building renewable energy, we set about defining income levels in 1998 as per World Bank"
      ],
      "metadata": {
        "id": "ybzPWQPAZyWH"
      },
      "id": "ybzPWQPAZyWH"
    },
    {
      "cell_type": "code",
      "source": [
        "low_income = 760 \n",
        "                                                                                            \n",
        "lower_middle_income_most = 3030 \n",
        "\n",
        "upper_middle_income_most = 9360"
      ],
      "metadata": {
        "id": "S7hElAtq-sIl"
      },
      "id": "S7hElAtq-sIl",
      "execution_count": 31,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "VI.2) Based on the above definition we attach labels to all the countries in our final database from Section 5"
      ],
      "metadata": {
        "id": "HejEx0T9aHqr"
      },
      "id": "HejEx0T9aHqr"
    },
    {
      "cell_type": "code",
      "source": [
        "clean_gnp_1998_ghg.loc[clean_gnp_1998_ghg['GNP Per Capita'] <=low_income, 'Income Category'] = \"lower income\"\n",
        "clean_gnp_1998_ghg.loc[((clean_gnp_1998_ghg['GNP Per Capita'] > low_income) & (clean_gnp_1998_ghg['GNP Per Capita'] <= lower_middle_income_most)), 'Income Category'] = \"lower_middle_income\"\n",
        "clean_gnp_1998_ghg.loc[((clean_gnp_1998_ghg['GNP Per Capita'] > lower_middle_income_most) & (clean_gnp_1998_ghg['GNP Per Capita'] < upper_middle_income_most)), 'Income Category'] = \"upper_middle_income\"\n",
        "clean_gnp_1998_ghg.loc[clean_gnp_1998_ghg['GNP Per Capita'] > upper_middle_income_most, 'Income Category'] = \"higher income\"\n",
        "clean_gnp_1998_ghg.head()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 438
        },
        "id": "hk9xYaVpUTUK",
        "outputId": "23d4d092-ea1f-435d-f9d8-1eb5fece833b"
      },
      "id": "hk9xYaVpUTUK",
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          Entity Code  Year  Coal (% electricity)  Gas (% electricity)  \\\n",
              "0     Luxembourg  LUX  1998                 0.000               51.351   \n",
              "1         Norway  NOR  1998                 0.034                0.189   \n",
              "2          Japan  JPN  1998                18.141               21.714   \n",
              "3        Denmark  DNK  1998                57.571               19.791   \n",
              "4  United States  USA  1998                52.623               14.815   \n",
              "\n",
              "   Hydro (% electricity)  Solar (% electricity)  Wind (% electricity)  \\\n",
              "0                 32.432                  0.000                 2.703   \n",
              "1                 99.476                  0.000                 0.009   \n",
              "2                  8.406                  0.014                 0.001   \n",
              "3                  0.073                  0.000                 6.865   \n",
              "4                  8.353                  0.014                 0.079   \n",
              "\n",
              "   Oil (% electricity)  Nuclear (% electricity)  ...  \\\n",
              "0                8.108                    0.000  ...   \n",
              "1                0.060                    0.000  ...   \n",
              "2               18.157                   30.762  ...   \n",
              "3               13.072                    0.000  ...   \n",
              "4                3.592                   18.392  ...   \n",
              "\n",
              "   Manufacturing and construction (per capita)  \\\n",
              "0                                     3.499065   \n",
              "1                                     1.344580   \n",
              "2                                     1.834209   \n",
              "3                                     1.065961   \n",
              "4                                     1.863503   \n",
              "\n",
              "   Fugitive emissions (per capita)  Agriculture (per capita)  \\\n",
              "0                         0.070451                  1.549922   \n",
              "1                         0.400226                  1.250145   \n",
              "2                         0.032096                  0.203670   \n",
              "3                         0.128293                  2.211162   \n",
              "4                         1.153156                  1.371126   \n",
              "\n",
              "   Buildings (per capita)  Electricity and heat (per capita)  \\\n",
              "0                3.663451                           0.375739   \n",
              "1                0.422711                           2.974715   \n",
              "2                1.106300                           3.475841   \n",
              "3                1.050868                           6.144842   \n",
              "4                1.993565                          10.175877   \n",
              "\n",
              "   Industry (per capita)  Transport (per capita)  Waste (per capita)  \\\n",
              "0               1.174183                8.970758            0.258320   \n",
              "1               1.166952                2.851050            0.420462   \n",
              "2               0.662144                2.038273            0.101402   \n",
              "3               0.507511                2.263989            0.260359   \n",
              "4               0.762096                5.961145            0.631670   \n",
              "\n",
              "   GHG Emissions per Capita  Income Category  \n",
              "0                 18.011967    higher income  \n",
              "1                  9.580696    higher income  \n",
              "2                  9.250265    higher income  \n",
              "3                 11.421823    higher income  \n",
              "4                 22.541012    higher income  \n",
              "\n",
              "[5 rows x 25 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7d097e5a-091f-4e87-a95f-ef51a066ce03\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Entity</th>\n",
              "      <th>Code</th>\n",
              "      <th>Year</th>\n",
              "      <th>Coal (% electricity)</th>\n",
              "      <th>Gas (% electricity)</th>\n",
              "      <th>Hydro (% electricity)</th>\n",
              "      <th>Solar (% electricity)</th>\n",
              "      <th>Wind (% electricity)</th>\n",
              "      <th>Oil (% electricity)</th>\n",
              "      <th>Nuclear (% electricity)</th>\n",
              "      <th>...</th>\n",
              "      <th>Manufacturing and construction (per capita)</th>\n",
              "      <th>Fugitive emissions (per capita)</th>\n",
              "      <th>Agriculture (per capita)</th>\n",
              "      <th>Buildings (per capita)</th>\n",
              "      <th>Electricity and heat (per capita)</th>\n",
              "      <th>Industry (per capita)</th>\n",
              "      <th>Transport (per capita)</th>\n",
              "      <th>Waste (per capita)</th>\n",
              "      <th>GHG Emissions per Capita</th>\n",
              "      <th>Income Category</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Luxembourg</td>\n",
              "      <td>LUX</td>\n",
              "      <td>1998</td>\n",
              "      <td>0.000</td>\n",
              "      <td>51.351</td>\n",
              "      <td>32.432</td>\n",
              "      <td>0.000</td>\n",
              "      <td>2.703</td>\n",
              "      <td>8.108</td>\n",
              "      <td>0.000</td>\n",
              "      <td>...</td>\n",
              "      <td>3.499065</td>\n",
              "      <td>0.070451</td>\n",
              "      <td>1.549922</td>\n",
              "      <td>3.663451</td>\n",
              "      <td>0.375739</td>\n",
              "      <td>1.174183</td>\n",
              "      <td>8.970758</td>\n",
              "      <td>0.258320</td>\n",
              "      <td>18.011967</td>\n",
              "      <td>higher income</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Norway</td>\n",
              "      <td>NOR</td>\n",
              "      <td>1998</td>\n",
              "      <td>0.034</td>\n",
              "      <td>0.189</td>\n",
              "      <td>99.476</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.009</td>\n",
              "      <td>0.060</td>\n",
              "      <td>0.000</td>\n",
              "      <td>...</td>\n",
              "      <td>1.344580</td>\n",
              "      <td>0.400226</td>\n",
              "      <td>1.250145</td>\n",
              "      <td>0.422711</td>\n",
              "      <td>2.974715</td>\n",
              "      <td>1.166952</td>\n",
              "      <td>2.851050</td>\n",
              "      <td>0.420462</td>\n",
              "      <td>9.580696</td>\n",
              "      <td>higher income</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Japan</td>\n",
              "      <td>JPN</td>\n",
              "      <td>1998</td>\n",
              "      <td>18.141</td>\n",
              "      <td>21.714</td>\n",
              "      <td>8.406</td>\n",
              "      <td>0.014</td>\n",
              "      <td>0.001</td>\n",
              "      <td>18.157</td>\n",
              "      <td>30.762</td>\n",
              "      <td>...</td>\n",
              "      <td>1.834209</td>\n",
              "      <td>0.032096</td>\n",
              "      <td>0.203670</td>\n",
              "      <td>1.106300</td>\n",
              "      <td>3.475841</td>\n",
              "      <td>0.662144</td>\n",
              "      <td>2.038273</td>\n",
              "      <td>0.101402</td>\n",
              "      <td>9.250265</td>\n",
              "      <td>higher income</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Denmark</td>\n",
              "      <td>DNK</td>\n",
              "      <td>1998</td>\n",
              "      <td>57.571</td>\n",
              "      <td>19.791</td>\n",
              "      <td>0.073</td>\n",
              "      <td>0.000</td>\n",
              "      <td>6.865</td>\n",
              "      <td>13.072</td>\n",
              "      <td>0.000</td>\n",
              "      <td>...</td>\n",
              "      <td>1.065961</td>\n",
              "      <td>0.128293</td>\n",
              "      <td>2.211162</td>\n",
              "      <td>1.050868</td>\n",
              "      <td>6.144842</td>\n",
              "      <td>0.507511</td>\n",
              "      <td>2.263989</td>\n",
              "      <td>0.260359</td>\n",
              "      <td>11.421823</td>\n",
              "      <td>higher income</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>United States</td>\n",
              "      <td>USA</td>\n",
              "      <td>1998</td>\n",
              "      <td>52.623</td>\n",
              "      <td>14.815</td>\n",
              "      <td>8.353</td>\n",
              "      <td>0.014</td>\n",
              "      <td>0.079</td>\n",
              "      <td>3.592</td>\n",
              "      <td>18.392</td>\n",
              "      <td>...</td>\n",
              "      <td>1.863503</td>\n",
              "      <td>1.153156</td>\n",
              "      <td>1.371126</td>\n",
              "      <td>1.993565</td>\n",
              "      <td>10.175877</td>\n",
              "      <td>0.762096</td>\n",
              "      <td>5.961145</td>\n",
              "      <td>0.631670</td>\n",
              "      <td>22.541012</td>\n",
              "      <td>higher income</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 25 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7d097e5a-091f-4e87-a95f-ef51a066ce03')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-7d097e5a-091f-4e87-a95f-ef51a066ce03 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-7d097e5a-091f-4e87-a95f-ef51a066ce03');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# VII. Regression Analysis"
      ],
      "metadata": {
        "id": "XL1I298haWcZ"
      },
      "id": "XL1I298haWcZ"
    },
    {
      "cell_type": "markdown",
      "source": [
        "VII.1) Treating GHG Emission per Capita as the independent variable and Renewable Energy as the dependent variable, we conduct a linear regression betweent the two."
      ],
      "metadata": {
        "id": "gdzsgEkJad55"
      },
      "id": "gdzsgEkJad55"
    },
    {
      "cell_type": "code",
      "source": [
        "indep_var = [\"GHG Emissions per Capita\"]\n",
        "dep_var = [\"Renewable Energy\"]\n",
        "\n",
        "x = clean_gnp_1998_ghg[indep_var]\n",
        "y = clean_gnp_1998_ghg[dep_var]\n",
        "\n",
        "lg = LinearRegression()\n",
        "lg.fit(x,y)\n",
        "intercept = lg.intercept_\n",
        "slope = lg.coef_\n",
        "\n",
        "print(intercept)\n",
        "\n",
        "print(slope)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hVpF_ZLKdvxG",
        "outputId": "9fb2e897-3219-409a-f676-c98903ecfc75"
      },
      "id": "hVpF_ZLKdvxG",
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[40.19470626]\n",
            "[[-1.84500266]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "VII.2) Create a Scatter Plot of GHG Emissions Per Capita v/s Renewable Energy with the colour scheme depicting Income Category. Ordered Dictionary has been used to force the order in the legends"
      ],
      "metadata": {
        "id": "e9VHD8tfbS98"
      },
      "id": "e9VHD8tfbS98"
    },
    {
      "cell_type": "code",
      "source": [
        "x_col = \"GHG Emissions per Capita\"\n",
        "y_col = \"Renewable Energy\"\n",
        "\n",
        "fig, ax = plt.subplots(figsize = (8,8))\n",
        "\n",
        "# Group dataframe by countries to plot different colors.\n",
        "country_groups = clean_gnp_1998_ghg.groupby(\"Income Category\")\n",
        "for name, group in country_groups:\n",
        "  x = group[x_col]\n",
        "  y = group[y_col]\n",
        "\n",
        "  ax.scatter(x,y, label = name)\n",
        "\n",
        "for i in clean_gnp_1998_ghg.index:\n",
        "    txt = clean_gnp_1998_ghg.loc[i,\"Code\"]\n",
        "    x = clean_gnp_1998_ghg.loc[i,\"GHG Emissions per Capita\"]\n",
        "    y = clean_gnp_1998_ghg.loc[i,\"Renewable Energy\"]\n",
        "    if x > 12 or y > 60:\n",
        "        ax.annotate(txt, (x+0.2,y))\n",
        "\n",
        "ax.set_xlabel(\"GHG Emissions per Capita (measured in tCO2e)\")\n",
        "ax.set_ylabel(\"% Renewable Energy in Electricity Mix\")\n",
        "\n",
        "ax.set_title(\"GHG Emissions per Capita v/s Renewable Energy Penetration in Countries by Income Category - 1998\")\n",
        "\n",
        "\n",
        "x_reg = np.linspace(0,20)\n",
        "y_reg = slope[0] * x_reg + intercept[0]\n",
        "ax.plot(x_reg, y_reg, label = \"linear regression\")\n",
        "\n",
        "handles, labels = ax.get_legend_handles_labels()\n",
        "by_label = OrderedDict(zip(labels, handles))\n",
        "\n",
        "ordered_label_list = ['lower income', 'lower_middle_income', 'upper_middle_income','higher income','linear regression']\n",
        "ordered_label_values = [by_label[k] for k in ordered_label_list]\n",
        "\n",
        "ax.legend(ordered_label_values, ordered_label_list)\n",
        "\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 513
        },
        "id": "bJt3YxKLLqL5",
        "outputId": "93fb918f-d79c-4631-d202-38594cf8307b"
      },
      "id": "bJt3YxKLLqL5",
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 576x576 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# VIII. Analysis for the Year 2018\n",
        "\n",
        "Repeat the steps from IV.4 till VII.2 for the year 2018"
      ],
      "metadata": {
        "id": "qRo_iTdZcARD"
      },
      "id": "qRo_iTdZcARD"
    },
    {
      "cell_type": "code",
      "source": [
        "clean_elec_2018_df = clean_elec_df[clean_elec_df['Year'] == 2018]\n",
        "clean_elec_2018_df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 285
        },
        "id": "2bde0Yvrgfqx",
        "outputId": "9eb12315-2c89-4ed3-d031-5bf4da4983eb"
      },
      "id": "2bde0Yvrgfqx",
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "             Entity Code  Year  Coal (% electricity)  Gas (% electricity)  \\\n",
              "18      Afghanistan  AFG  2018                 0.000               13.453   \n",
              "53           Africa  NaN  2018                30.335               39.171   \n",
              "83          Albania  ALB  2018                 0.000                0.000   \n",
              "103         Algeria  DZA  2018                 0.000               98.987   \n",
              "138  American Samoa  ASM  2018                 0.000                0.000   \n",
              "\n",
              "     Hydro (% electricity)  Solar (% electricity)  Wind (% electricity)  \\\n",
              "18                  83.229                  3.318                 0.000   \n",
              "53                  15.416                  1.165                 1.689   \n",
              "83                 100.000                  0.000                 0.000   \n",
              "103                  0.161                  0.837                 0.015   \n",
              "138                  0.000                  0.000                 0.000   \n",
              "\n",
              "     Oil (% electricity)  Nuclear (% electricity)  \\\n",
              "18                 0.000                    0.000   \n",
              "53                 9.378                    1.311   \n",
              "83                 0.000                    0.000   \n",
              "103                0.000                    0.000   \n",
              "138              100.000                    0.000   \n",
              "\n",
              "     Other renewables including bioenergy (% electricity)  \n",
              "18                                               0.000     \n",
              "53                                               0.953     \n",
              "83                                               0.000     \n",
              "103                                              0.000     \n",
              "138                                              0.000     "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-acb94cb0-e853-4ca2-a797-b3a3061f65ca\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Entity</th>\n",
              "      <th>Code</th>\n",
              "      <th>Year</th>\n",
              "      <th>Coal (% electricity)</th>\n",
              "      <th>Gas (% electricity)</th>\n",
              "      <th>Hydro (% electricity)</th>\n",
              "      <th>Solar (% electricity)</th>\n",
              "      <th>Wind (% electricity)</th>\n",
              "      <th>Oil (% electricity)</th>\n",
              "      <th>Nuclear (% electricity)</th>\n",
              "      <th>Other renewables including bioenergy (% electricity)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>AFG</td>\n",
              "      <td>2018</td>\n",
              "      <td>0.000</td>\n",
              "      <td>13.453</td>\n",
              "      <td>83.229</td>\n",
              "      <td>3.318</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>53</th>\n",
              "      <td>Africa</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2018</td>\n",
              "      <td>30.335</td>\n",
              "      <td>39.171</td>\n",
              "      <td>15.416</td>\n",
              "      <td>1.165</td>\n",
              "      <td>1.689</td>\n",
              "      <td>9.378</td>\n",
              "      <td>1.311</td>\n",
              "      <td>0.953</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>83</th>\n",
              "      <td>Albania</td>\n",
              "      <td>ALB</td>\n",
              "      <td>2018</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>100.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>103</th>\n",
              "      <td>Algeria</td>\n",
              "      <td>DZA</td>\n",
              "      <td>2018</td>\n",
              "      <td>0.000</td>\n",
              "      <td>98.987</td>\n",
              "      <td>0.161</td>\n",
              "      <td>0.837</td>\n",
              "      <td>0.015</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>138</th>\n",
              "      <td>American Samoa</td>\n",
              "      <td>ASM</td>\n",
              "      <td>2018</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>100.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-acb94cb0-e853-4ca2-a797-b3a3061f65ca')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-acb94cb0-e853-4ca2-a797-b3a3061f65ca button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-acb94cb0-e853-4ca2-a797-b3a3061f65ca');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 35
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "gnp_per_capita_2018_df = gnp_per_capita_df[gnp_per_capita_df['Year'] == 2018]\n",
        "gnp_per_capita_2018_df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 226
        },
        "id": "rC3cXJhZA6Zb",
        "outputId": "8c2aab55-54e5-40b1-9861-2d72b683d1f9"
      },
      "id": "rC3cXJhZA6Zb",
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Year  Africa Eastern and Southern  Africa Western and Central  Angola  \\\n",
              "58  2018                  1494.710171                  1611.86562  3210.0   \n",
              "\n",
              "    Albania   Arab World  Argentina  Armenia  Antigua and Barbuda  Australia  \\\n",
              "58   4860.0  6171.011768    12430.0   4240.0              15880.0    53070.0   \n",
              "\n",
              "    ...  United States  Uzbekistan  St. Vincent and the Grenadines  Vietnam  \\\n",
              "58  ...        63490.0      2110.0                          7400.0   2380.0   \n",
              "\n",
              "    Vanuatu        World  Yemen, Rep.  South Africa  Zambia  Zimbabwe  \n",
              "58   3170.0  11148.93049        910.0        6340.0  1440.0    1350.0  \n",
              "\n",
              "[1 rows x 219 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-23284829-f16c-471c-881c-7e23818b82c4\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Year</th>\n",
              "      <th>Africa Eastern and Southern</th>\n",
              "      <th>Africa Western and Central</th>\n",
              "      <th>Angola</th>\n",
              "      <th>Albania</th>\n",
              "      <th>Arab World</th>\n",
              "      <th>Argentina</th>\n",
              "      <th>Armenia</th>\n",
              "      <th>Antigua and Barbuda</th>\n",
              "      <th>Australia</th>\n",
              "      <th>...</th>\n",
              "      <th>United States</th>\n",
              "      <th>Uzbekistan</th>\n",
              "      <th>St. Vincent and the Grenadines</th>\n",
              "      <th>Vietnam</th>\n",
              "      <th>Vanuatu</th>\n",
              "      <th>World</th>\n",
              "      <th>Yemen, Rep.</th>\n",
              "      <th>South Africa</th>\n",
              "      <th>Zambia</th>\n",
              "      <th>Zimbabwe</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>58</th>\n",
              "      <td>2018</td>\n",
              "      <td>1494.710171</td>\n",
              "      <td>1611.86562</td>\n",
              "      <td>3210.0</td>\n",
              "      <td>4860.0</td>\n",
              "      <td>6171.011768</td>\n",
              "      <td>12430.0</td>\n",
              "      <td>4240.0</td>\n",
              "      <td>15880.0</td>\n",
              "      <td>53070.0</td>\n",
              "      <td>...</td>\n",
              "      <td>63490.0</td>\n",
              "      <td>2110.0</td>\n",
              "      <td>7400.0</td>\n",
              "      <td>2380.0</td>\n",
              "      <td>3170.0</td>\n",
              "      <td>11148.93049</td>\n",
              "      <td>910.0</td>\n",
              "      <td>6340.0</td>\n",
              "      <td>1440.0</td>\n",
              "      <td>1350.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1 rows × 219 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-23284829-f16c-471c-881c-7e23818b82c4')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-23284829-f16c-471c-881c-7e23818b82c4 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-23284829-f16c-471c-881c-7e23818b82c4');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 36
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "gnp_per_capita_2018_df_trans = gnp_per_capita_2018_df.T\n",
        "\n",
        "gnp_per_capita_2018_df_trans = gnp_per_capita_2018_df_trans.rename(columns=gnp_per_capita_2018_df_trans.iloc[0]).drop(gnp_per_capita_2018_df_trans.index[0])\n",
        "\n",
        "gnp_per_capita_2018_df_trans.reset_index(inplace=True)\n",
        "\n",
        "gnp_per_capita_2018_df_trans.head()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "TEqwWu8hBJo5",
        "outputId": "9cc427cc-f6a0-46b1-f78b-d84aa524bde2"
      },
      "id": "TEqwWu8hBJo5",
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                         index       2018.0\n",
              "0  Africa Eastern and Southern  1494.710171\n",
              "1   Africa Western and Central  1611.865620\n",
              "2                       Angola  3210.000000\n",
              "3                      Albania  4860.000000\n",
              "4                   Arab World  6171.011768"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3fe1afa4-627f-4b58-8583-d5f26ba22b43\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>index</th>\n",
              "      <th>2018.0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Africa Eastern and Southern</td>\n",
              "      <td>1494.710171</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Africa Western and Central</td>\n",
              "      <td>1611.865620</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Angola</td>\n",
              "      <td>3210.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Albania</td>\n",
              "      <td>4860.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Arab World</td>\n",
              "      <td>6171.011768</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3fe1afa4-627f-4b58-8583-d5f26ba22b43')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-3fe1afa4-627f-4b58-8583-d5f26ba22b43 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-3fe1afa4-627f-4b58-8583-d5f26ba22b43');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 37
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data = {'Entity': [], 'GNP Per Capita': []}\n",
        " \n",
        "# Convert the dictionary into DataFrame\n",
        "gnp_per_capita_2018_final = pd.DataFrame(data)\n",
        "gnp_per_capita_2018_final.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 49
        },
        "id": "KmdPmft4Bnvk",
        "outputId": "d598f73d-4c25-4c1e-ccae-1f435f126cd6"
      },
      "id": "KmdPmft4Bnvk",
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Empty DataFrame\n",
              "Columns: [Entity, GNP Per Capita]\n",
              "Index: []"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-305b2e30-340b-48d0-8989-329edb77b84a\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Entity</th>\n",
              "      <th>GNP Per Capita</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-305b2e30-340b-48d0-8989-329edb77b84a')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-305b2e30-340b-48d0-8989-329edb77b84a button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-305b2e30-340b-48d0-8989-329edb77b84a');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "gnp_per_capita_2018_final['Entity']= gnp_per_capita_2018_df_trans['index']\n",
        "gnp_per_capita_2018_final['GNP Per Capita']= gnp_per_capita_2018_df_trans[2018.0]\n",
        "gnp_per_capita_2018_final.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "I_gWI1fUCWAT",
        "outputId": "c1dc394f-ae9b-46bb-c4d7-2b63f9f09a35"
      },
      "id": "I_gWI1fUCWAT",
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                        Entity  GNP Per Capita\n",
              "0  Africa Eastern and Southern     1494.710171\n",
              "1   Africa Western and Central     1611.865620\n",
              "2                       Angola     3210.000000\n",
              "3                      Albania     4860.000000\n",
              "4                   Arab World     6171.011768"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d1aac31c-3809-48cf-aab4-f1a6b054aafa\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Entity</th>\n",
              "      <th>GNP Per Capita</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Africa Eastern and Southern</td>\n",
              "      <td>1494.710171</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Africa Western and Central</td>\n",
              "      <td>1611.865620</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Angola</td>\n",
              "      <td>3210.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Albania</td>\n",
              "      <td>4860.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Arab World</td>\n",
              "      <td>6171.011768</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d1aac31c-3809-48cf-aab4-f1a6b054aafa')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-d1aac31c-3809-48cf-aab4-f1a6b054aafa button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-d1aac31c-3809-48cf-aab4-f1a6b054aafa');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 39
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "clean_gnp_2018 = pd.merge(clean_elec_2018_df, gnp_per_capita_2018_final, on='Entity')\n",
        "clean_gnp_2018.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 285
        },
        "id": "n0uOL-VSCAcF",
        "outputId": "7df4a11b-f391-4d67-c334-dcd627e12fef"
      },
      "id": "n0uOL-VSCAcF",
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                Entity Code  Year  Coal (% electricity)  Gas (% electricity)  \\\n",
              "0              Albania  ALB  2018                 0.000                0.000   \n",
              "1              Algeria  DZA  2018                 0.000               98.987   \n",
              "2               Angola  AGO  2018                 0.000               13.146   \n",
              "3  Antigua and Barbuda  ATG  2018                 0.000                0.000   \n",
              "4            Argentina  ARG  2018                 1.572               63.433   \n",
              "\n",
              "   Hydro (% electricity)  Solar (% electricity)  Wind (% electricity)  \\\n",
              "0                100.000                  0.000                 0.000   \n",
              "1                  0.161                  0.837                 0.015   \n",
              "2                 73.994                  0.154                 0.000   \n",
              "3                  0.000                  3.867                 0.000   \n",
              "4                 22.915                  0.077                 1.013   \n",
              "\n",
              "   Oil (% electricity)  Nuclear (% electricity)  \\\n",
              "0                0.000                    0.000   \n",
              "1                0.000                    0.000   \n",
              "2               10.995                    0.000   \n",
              "3               96.133                    0.000   \n",
              "4                5.388                    4.626   \n",
              "\n",
              "   Other renewables including bioenergy (% electricity)  GNP Per Capita  \n",
              "0                                              0.000             4860.0  \n",
              "1                                              0.000             3980.0  \n",
              "2                                              1.712             3210.0  \n",
              "3                                              0.000            15880.0  \n",
              "4                                              0.975            12430.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5f35fbc1-8b64-4813-a148-3a74aae74467\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Entity</th>\n",
              "      <th>Code</th>\n",
              "      <th>Year</th>\n",
              "      <th>Coal (% electricity)</th>\n",
              "      <th>Gas (% electricity)</th>\n",
              "      <th>Hydro (% electricity)</th>\n",
              "      <th>Solar (% electricity)</th>\n",
              "      <th>Wind (% electricity)</th>\n",
              "      <th>Oil (% electricity)</th>\n",
              "      <th>Nuclear (% electricity)</th>\n",
              "      <th>Other renewables including bioenergy (% electricity)</th>\n",
              "      <th>GNP Per Capita</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Albania</td>\n",
              "      <td>ALB</td>\n",
              "      <td>2018</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>100.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>4860.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Algeria</td>\n",
              "      <td>DZA</td>\n",
              "      <td>2018</td>\n",
              "      <td>0.000</td>\n",
              "      <td>98.987</td>\n",
              "      <td>0.161</td>\n",
              "      <td>0.837</td>\n",
              "      <td>0.015</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>3980.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Angola</td>\n",
              "      <td>AGO</td>\n",
              "      <td>2018</td>\n",
              "      <td>0.000</td>\n",
              "      <td>13.146</td>\n",
              "      <td>73.994</td>\n",
              "      <td>0.154</td>\n",
              "      <td>0.000</td>\n",
              "      <td>10.995</td>\n",
              "      <td>0.000</td>\n",
              "      <td>1.712</td>\n",
              "      <td>3210.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Antigua and Barbuda</td>\n",
              "      <td>ATG</td>\n",
              "      <td>2018</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>3.867</td>\n",
              "      <td>0.000</td>\n",
              "      <td>96.133</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>15880.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Argentina</td>\n",
              "      <td>ARG</td>\n",
              "      <td>2018</td>\n",
              "      <td>1.572</td>\n",
              "      <td>63.433</td>\n",
              "      <td>22.915</td>\n",
              "      <td>0.077</td>\n",
              "      <td>1.013</td>\n",
              "      <td>5.388</td>\n",
              "      <td>4.626</td>\n",
              "      <td>0.975</td>\n",
              "      <td>12430.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5f35fbc1-8b64-4813-a148-3a74aae74467')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-5f35fbc1-8b64-4813-a148-3a74aae74467 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-5f35fbc1-8b64-4813-a148-3a74aae74467');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 40
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "clean_gnp_2018_final = clean_gnp_2018.dropna()\n",
        "clean_gnp_2018_final.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 285
        },
        "id": "lMLIvC3-CzqY",
        "outputId": "978f1756-a49b-4b6c-f934-f770fa862ead"
      },
      "id": "lMLIvC3-CzqY",
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                Entity Code  Year  Coal (% electricity)  Gas (% electricity)  \\\n",
              "0              Albania  ALB  2018                 0.000                0.000   \n",
              "1              Algeria  DZA  2018                 0.000               98.987   \n",
              "2               Angola  AGO  2018                 0.000               13.146   \n",
              "3  Antigua and Barbuda  ATG  2018                 0.000                0.000   \n",
              "4            Argentina  ARG  2018                 1.572               63.433   \n",
              "\n",
              "   Hydro (% electricity)  Solar (% electricity)  Wind (% electricity)  \\\n",
              "0                100.000                  0.000                 0.000   \n",
              "1                  0.161                  0.837                 0.015   \n",
              "2                 73.994                  0.154                 0.000   \n",
              "3                  0.000                  3.867                 0.000   \n",
              "4                 22.915                  0.077                 1.013   \n",
              "\n",
              "   Oil (% electricity)  Nuclear (% electricity)  \\\n",
              "0                0.000                    0.000   \n",
              "1                0.000                    0.000   \n",
              "2               10.995                    0.000   \n",
              "3               96.133                    0.000   \n",
              "4                5.388                    4.626   \n",
              "\n",
              "   Other renewables including bioenergy (% electricity)  GNP Per Capita  \n",
              "0                                              0.000             4860.0  \n",
              "1                                              0.000             3980.0  \n",
              "2                                              1.712             3210.0  \n",
              "3                                              0.000            15880.0  \n",
              "4                                              0.975            12430.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8a0c1514-e403-4b71-ab09-7b60dd50891a\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Entity</th>\n",
              "      <th>Code</th>\n",
              "      <th>Year</th>\n",
              "      <th>Coal (% electricity)</th>\n",
              "      <th>Gas (% electricity)</th>\n",
              "      <th>Hydro (% electricity)</th>\n",
              "      <th>Solar (% electricity)</th>\n",
              "      <th>Wind (% electricity)</th>\n",
              "      <th>Oil (% electricity)</th>\n",
              "      <th>Nuclear (% electricity)</th>\n",
              "      <th>Other renewables including bioenergy (% electricity)</th>\n",
              "      <th>GNP Per Capita</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Albania</td>\n",
              "      <td>ALB</td>\n",
              "      <td>2018</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>100.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>4860.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Algeria</td>\n",
              "      <td>DZA</td>\n",
              "      <td>2018</td>\n",
              "      <td>0.000</td>\n",
              "      <td>98.987</td>\n",
              "      <td>0.161</td>\n",
              "      <td>0.837</td>\n",
              "      <td>0.015</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>3980.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Angola</td>\n",
              "      <td>AGO</td>\n",
              "      <td>2018</td>\n",
              "      <td>0.000</td>\n",
              "      <td>13.146</td>\n",
              "      <td>73.994</td>\n",
              "      <td>0.154</td>\n",
              "      <td>0.000</td>\n",
              "      <td>10.995</td>\n",
              "      <td>0.000</td>\n",
              "      <td>1.712</td>\n",
              "      <td>3210.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Antigua and Barbuda</td>\n",
              "      <td>ATG</td>\n",
              "      <td>2018</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>3.867</td>\n",
              "      <td>0.000</td>\n",
              "      <td>96.133</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>15880.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Argentina</td>\n",
              "      <td>ARG</td>\n",
              "      <td>2018</td>\n",
              "      <td>1.572</td>\n",
              "      <td>63.433</td>\n",
              "      <td>22.915</td>\n",
              "      <td>0.077</td>\n",
              "      <td>1.013</td>\n",
              "      <td>5.388</td>\n",
              "      <td>4.626</td>\n",
              "      <td>0.975</td>\n",
              "      <td>12430.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8a0c1514-e403-4b71-ab09-7b60dd50891a')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-8a0c1514-e403-4b71-ab09-7b60dd50891a button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-8a0c1514-e403-4b71-ab09-7b60dd50891a');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 41
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "clean_gnp_2018_final['Renewable Energy'] = clean_gnp_2018_final.iloc[:,[5,6,7,10]].sum(axis=1)\n",
        "\n",
        "clean_gnp_2018_final.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 302
        },
        "id": "yY1biQNFDp7Z",
        "outputId": "95438311-8f6b-4f8c-d513-dcd730d8ce5a"
      },
      "id": "yY1biQNFDp7Z",
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                Entity Code  Year  Coal (% electricity)  Gas (% electricity)  \\\n",
              "0              Albania  ALB  2018                 0.000                0.000   \n",
              "1              Algeria  DZA  2018                 0.000               98.987   \n",
              "2               Angola  AGO  2018                 0.000               13.146   \n",
              "3  Antigua and Barbuda  ATG  2018                 0.000                0.000   \n",
              "4            Argentina  ARG  2018                 1.572               63.433   \n",
              "\n",
              "   Hydro (% electricity)  Solar (% electricity)  Wind (% electricity)  \\\n",
              "0                100.000                  0.000                 0.000   \n",
              "1                  0.161                  0.837                 0.015   \n",
              "2                 73.994                  0.154                 0.000   \n",
              "3                  0.000                  3.867                 0.000   \n",
              "4                 22.915                  0.077                 1.013   \n",
              "\n",
              "   Oil (% electricity)  Nuclear (% electricity)  \\\n",
              "0                0.000                    0.000   \n",
              "1                0.000                    0.000   \n",
              "2               10.995                    0.000   \n",
              "3               96.133                    0.000   \n",
              "4                5.388                    4.626   \n",
              "\n",
              "   Other renewables including bioenergy (% electricity)  GNP Per Capita  \\\n",
              "0                                              0.000             4860.0   \n",
              "1                                              0.000             3980.0   \n",
              "2                                              1.712             3210.0   \n",
              "3                                              0.000            15880.0   \n",
              "4                                              0.975            12430.0   \n",
              "\n",
              "   Renewable Energy  \n",
              "0           100.000  \n",
              "1             1.013  \n",
              "2            75.860  \n",
              "3             3.867  \n",
              "4            24.980  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c3fa15e2-55c5-457b-ae05-eb6e8e67e4cc\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Entity</th>\n",
              "      <th>Code</th>\n",
              "      <th>Year</th>\n",
              "      <th>Coal (% electricity)</th>\n",
              "      <th>Gas (% electricity)</th>\n",
              "      <th>Hydro (% electricity)</th>\n",
              "      <th>Solar (% electricity)</th>\n",
              "      <th>Wind (% electricity)</th>\n",
              "      <th>Oil (% electricity)</th>\n",
              "      <th>Nuclear (% electricity)</th>\n",
              "      <th>Other renewables including bioenergy (% electricity)</th>\n",
              "      <th>GNP Per Capita</th>\n",
              "      <th>Renewable Energy</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Albania</td>\n",
              "      <td>ALB</td>\n",
              "      <td>2018</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>100.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>4860.0</td>\n",
              "      <td>100.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Algeria</td>\n",
              "      <td>DZA</td>\n",
              "      <td>2018</td>\n",
              "      <td>0.000</td>\n",
              "      <td>98.987</td>\n",
              "      <td>0.161</td>\n",
              "      <td>0.837</td>\n",
              "      <td>0.015</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>3980.0</td>\n",
              "      <td>1.013</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Angola</td>\n",
              "      <td>AGO</td>\n",
              "      <td>2018</td>\n",
              "      <td>0.000</td>\n",
              "      <td>13.146</td>\n",
              "      <td>73.994</td>\n",
              "      <td>0.154</td>\n",
              "      <td>0.000</td>\n",
              "      <td>10.995</td>\n",
              "      <td>0.000</td>\n",
              "      <td>1.712</td>\n",
              "      <td>3210.0</td>\n",
              "      <td>75.860</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Antigua and Barbuda</td>\n",
              "      <td>ATG</td>\n",
              "      <td>2018</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>3.867</td>\n",
              "      <td>0.000</td>\n",
              "      <td>96.133</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>15880.0</td>\n",
              "      <td>3.867</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Argentina</td>\n",
              "      <td>ARG</td>\n",
              "      <td>2018</td>\n",
              "      <td>1.572</td>\n",
              "      <td>63.433</td>\n",
              "      <td>22.915</td>\n",
              "      <td>0.077</td>\n",
              "      <td>1.013</td>\n",
              "      <td>5.388</td>\n",
              "      <td>4.626</td>\n",
              "      <td>0.975</td>\n",
              "      <td>12430.0</td>\n",
              "      <td>24.980</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c3fa15e2-55c5-457b-ae05-eb6e8e67e4cc')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-c3fa15e2-55c5-457b-ae05-eb6e8e67e4cc button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-c3fa15e2-55c5-457b-ae05-eb6e8e67e4cc');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 42
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "per_capita_ghg_sector_2018_df = per_capita_ghg_sector_df[per_capita_ghg_sector_df['Year'] == 2018].copy()\n",
        "per_capita_ghg_sector_2018_df.dropna(axis=0, how='any', inplace=True)\n",
        "per_capita_ghg_sector_2018_df['GHG Emissions per Capita'] = per_capita_ghg_sector_2018_df.iloc[:,[5,6,8,9,10,11,12]].sum(axis=1)\n",
        "per_capita_ghg_sector_2018_df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 302
        },
        "id": "la05iMudDAzm",
        "outputId": "d317f850-8eb9-4347-9586-9fdf15fb1f2d"
      },
      "id": "la05iMudDAzm",
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          Entity Code  Year  Aviation and shipping (per capita)  \\\n",
              "28   Afghanistan  AFG  2018                            0.001076   \n",
              "57       Albania  ALB  2018                            0.041627   \n",
              "86       Algeria  DZA  2018                            0.049019   \n",
              "144       Angola  AGO  2018                            0.067511   \n",
              "202    Argentina  ARG  2018                            0.126913   \n",
              "\n",
              "     Land-use change and forestry (per capita)  \\\n",
              "28                                    0.004035   \n",
              "57                                   -0.083254   \n",
              "86                                    0.004736   \n",
              "144                                   1.456031   \n",
              "202                                   0.672886   \n",
              "\n",
              "     Manufacturing and construction (per capita)  \\\n",
              "28                                      0.088508   \n",
              "57                                      0.423209   \n",
              "86                                      0.301456   \n",
              "144                                     0.045765   \n",
              "202                                     0.466399   \n",
              "\n",
              "     Fugitive emissions (per capita)  Agriculture (per capita)  \\\n",
              "28                          0.059722                  0.396536   \n",
              "57                          0.000000                  1.030272   \n",
              "86                          0.850849                  0.291747   \n",
              "144                         0.792605                  1.057132   \n",
              "202                         0.270056                  2.929140   \n",
              "\n",
              "     Buildings (per capita)  Electricity and heat (per capita)  \\\n",
              "28                 0.003766                           0.005918   \n",
              "57                 0.159571                           0.048565   \n",
              "86                 0.623751                           1.149937   \n",
              "144                0.105161                           0.231095   \n",
              "202                0.633437                           1.444507   \n",
              "\n",
              "     Industry (per capita)  Transport (per capita)  Waste (per capita)  \\\n",
              "28                0.028516                0.100345            0.094964   \n",
              "57                0.523808                0.763164            0.339955   \n",
              "86                0.411334                1.076526            0.342897   \n",
              "144               0.045116                0.227525            0.056800   \n",
              "202               0.614502                1.077294            0.488490   \n",
              "\n",
              "     GHG Emissions per Capita  \n",
              "28                   0.381740  \n",
              "57                   2.258272  \n",
              "86                   4.756750  \n",
              "144                  1.504068  \n",
              "202                  4.994686  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-09654865-2a5c-42f5-a896-1c35b37777a9\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Entity</th>\n",
              "      <th>Code</th>\n",
              "      <th>Year</th>\n",
              "      <th>Aviation and shipping (per capita)</th>\n",
              "      <th>Land-use change and forestry (per capita)</th>\n",
              "      <th>Manufacturing and construction (per capita)</th>\n",
              "      <th>Fugitive emissions (per capita)</th>\n",
              "      <th>Agriculture (per capita)</th>\n",
              "      <th>Buildings (per capita)</th>\n",
              "      <th>Electricity and heat (per capita)</th>\n",
              "      <th>Industry (per capita)</th>\n",
              "      <th>Transport (per capita)</th>\n",
              "      <th>Waste (per capita)</th>\n",
              "      <th>GHG Emissions per Capita</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>28</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>AFG</td>\n",
              "      <td>2018</td>\n",
              "      <td>0.001076</td>\n",
              "      <td>0.004035</td>\n",
              "      <td>0.088508</td>\n",
              "      <td>0.059722</td>\n",
              "      <td>0.396536</td>\n",
              "      <td>0.003766</td>\n",
              "      <td>0.005918</td>\n",
              "      <td>0.028516</td>\n",
              "      <td>0.100345</td>\n",
              "      <td>0.094964</td>\n",
              "      <td>0.381740</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>57</th>\n",
              "      <td>Albania</td>\n",
              "      <td>ALB</td>\n",
              "      <td>2018</td>\n",
              "      <td>0.041627</td>\n",
              "      <td>-0.083254</td>\n",
              "      <td>0.423209</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.030272</td>\n",
              "      <td>0.159571</td>\n",
              "      <td>0.048565</td>\n",
              "      <td>0.523808</td>\n",
              "      <td>0.763164</td>\n",
              "      <td>0.339955</td>\n",
              "      <td>2.258272</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>86</th>\n",
              "      <td>Algeria</td>\n",
              "      <td>DZA</td>\n",
              "      <td>2018</td>\n",
              "      <td>0.049019</td>\n",
              "      <td>0.004736</td>\n",
              "      <td>0.301456</td>\n",
              "      <td>0.850849</td>\n",
              "      <td>0.291747</td>\n",
              "      <td>0.623751</td>\n",
              "      <td>1.149937</td>\n",
              "      <td>0.411334</td>\n",
              "      <td>1.076526</td>\n",
              "      <td>0.342897</td>\n",
              "      <td>4.756750</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>144</th>\n",
              "      <td>Angola</td>\n",
              "      <td>AGO</td>\n",
              "      <td>2018</td>\n",
              "      <td>0.067511</td>\n",
              "      <td>1.456031</td>\n",
              "      <td>0.045765</td>\n",
              "      <td>0.792605</td>\n",
              "      <td>1.057132</td>\n",
              "      <td>0.105161</td>\n",
              "      <td>0.231095</td>\n",
              "      <td>0.045116</td>\n",
              "      <td>0.227525</td>\n",
              "      <td>0.056800</td>\n",
              "      <td>1.504068</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>202</th>\n",
              "      <td>Argentina</td>\n",
              "      <td>ARG</td>\n",
              "      <td>2018</td>\n",
              "      <td>0.126913</td>\n",
              "      <td>0.672886</td>\n",
              "      <td>0.466399</td>\n",
              "      <td>0.270056</td>\n",
              "      <td>2.929140</td>\n",
              "      <td>0.633437</td>\n",
              "      <td>1.444507</td>\n",
              "      <td>0.614502</td>\n",
              "      <td>1.077294</td>\n",
              "      <td>0.488490</td>\n",
              "      <td>4.994686</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-09654865-2a5c-42f5-a896-1c35b37777a9')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-09654865-2a5c-42f5-a896-1c35b37777a9 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-09654865-2a5c-42f5-a896-1c35b37777a9');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 43
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "clean_gnp_2018_ghg = pd.merge(clean_gnp_2018_final, per_capita_ghg_sector_2018_df, on=['Entity', 'Code', 'Year'], how='left')\n",
        "clean_gnp_2018_ghg.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 421
        },
        "id": "Z9dUcdHODUiK",
        "outputId": "203e00ab-3786-4e81-a2ce-2da2cb6c4ef8"
      },
      "id": "Z9dUcdHODUiK",
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                Entity Code  Year  Coal (% electricity)  Gas (% electricity)  \\\n",
              "0              Albania  ALB  2018                 0.000                0.000   \n",
              "1              Algeria  DZA  2018                 0.000               98.987   \n",
              "2               Angola  AGO  2018                 0.000               13.146   \n",
              "3  Antigua and Barbuda  ATG  2018                 0.000                0.000   \n",
              "4            Argentina  ARG  2018                 1.572               63.433   \n",
              "\n",
              "   Hydro (% electricity)  Solar (% electricity)  Wind (% electricity)  \\\n",
              "0                100.000                  0.000                 0.000   \n",
              "1                  0.161                  0.837                 0.015   \n",
              "2                 73.994                  0.154                 0.000   \n",
              "3                  0.000                  3.867                 0.000   \n",
              "4                 22.915                  0.077                 1.013   \n",
              "\n",
              "   Oil (% electricity)  Nuclear (% electricity)  ...  \\\n",
              "0                0.000                    0.000  ...   \n",
              "1                0.000                    0.000  ...   \n",
              "2               10.995                    0.000  ...   \n",
              "3               96.133                    0.000  ...   \n",
              "4                5.388                    4.626  ...   \n",
              "\n",
              "   Land-use change and forestry (per capita)  \\\n",
              "0                                  -0.083254   \n",
              "1                                   0.004736   \n",
              "2                                   1.456031   \n",
              "3                                        NaN   \n",
              "4                                   0.672886   \n",
              "\n",
              "   Manufacturing and construction (per capita)  \\\n",
              "0                                     0.423209   \n",
              "1                                     0.301456   \n",
              "2                                     0.045765   \n",
              "3                                          NaN   \n",
              "4                                     0.466399   \n",
              "\n",
              "   Fugitive emissions (per capita)  Agriculture (per capita)  \\\n",
              "0                         0.000000                  1.030272   \n",
              "1                         0.850849                  0.291747   \n",
              "2                         0.792605                  1.057132   \n",
              "3                              NaN                       NaN   \n",
              "4                         0.270056                  2.929140   \n",
              "\n",
              "   Buildings (per capita)  Electricity and heat (per capita)  \\\n",
              "0                0.159571                           0.048565   \n",
              "1                0.623751                           1.149937   \n",
              "2                0.105161                           0.231095   \n",
              "3                     NaN                                NaN   \n",
              "4                0.633437                           1.444507   \n",
              "\n",
              "   Industry (per capita)  Transport (per capita)  Waste (per capita)  \\\n",
              "0               0.523808                0.763164            0.339955   \n",
              "1               0.411334                1.076526            0.342897   \n",
              "2               0.045116                0.227525            0.056800   \n",
              "3                    NaN                     NaN                 NaN   \n",
              "4               0.614502                1.077294            0.488490   \n",
              "\n",
              "   GHG Emissions per Capita  \n",
              "0                  2.258272  \n",
              "1                  4.756750  \n",
              "2                  1.504068  \n",
              "3                       NaN  \n",
              "4                  4.994686  \n",
              "\n",
              "[5 rows x 24 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-84d93a8f-2b01-40d4-b839-be8575619a7b\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Entity</th>\n",
              "      <th>Code</th>\n",
              "      <th>Year</th>\n",
              "      <th>Coal (% electricity)</th>\n",
              "      <th>Gas (% electricity)</th>\n",
              "      <th>Hydro (% electricity)</th>\n",
              "      <th>Solar (% electricity)</th>\n",
              "      <th>Wind (% electricity)</th>\n",
              "      <th>Oil (% electricity)</th>\n",
              "      <th>Nuclear (% electricity)</th>\n",
              "      <th>...</th>\n",
              "      <th>Land-use change and forestry (per capita)</th>\n",
              "      <th>Manufacturing and construction (per capita)</th>\n",
              "      <th>Fugitive emissions (per capita)</th>\n",
              "      <th>Agriculture (per capita)</th>\n",
              "      <th>Buildings (per capita)</th>\n",
              "      <th>Electricity and heat (per capita)</th>\n",
              "      <th>Industry (per capita)</th>\n",
              "      <th>Transport (per capita)</th>\n",
              "      <th>Waste (per capita)</th>\n",
              "      <th>GHG Emissions per Capita</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Albania</td>\n",
              "      <td>ALB</td>\n",
              "      <td>2018</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>100.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.083254</td>\n",
              "      <td>0.423209</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.030272</td>\n",
              "      <td>0.159571</td>\n",
              "      <td>0.048565</td>\n",
              "      <td>0.523808</td>\n",
              "      <td>0.763164</td>\n",
              "      <td>0.339955</td>\n",
              "      <td>2.258272</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Algeria</td>\n",
              "      <td>DZA</td>\n",
              "      <td>2018</td>\n",
              "      <td>0.000</td>\n",
              "      <td>98.987</td>\n",
              "      <td>0.161</td>\n",
              "      <td>0.837</td>\n",
              "      <td>0.015</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>...</td>\n",
              "      <td>0.004736</td>\n",
              "      <td>0.301456</td>\n",
              "      <td>0.850849</td>\n",
              "      <td>0.291747</td>\n",
              "      <td>0.623751</td>\n",
              "      <td>1.149937</td>\n",
              "      <td>0.411334</td>\n",
              "      <td>1.076526</td>\n",
              "      <td>0.342897</td>\n",
              "      <td>4.756750</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Angola</td>\n",
              "      <td>AGO</td>\n",
              "      <td>2018</td>\n",
              "      <td>0.000</td>\n",
              "      <td>13.146</td>\n",
              "      <td>73.994</td>\n",
              "      <td>0.154</td>\n",
              "      <td>0.000</td>\n",
              "      <td>10.995</td>\n",
              "      <td>0.000</td>\n",
              "      <td>...</td>\n",
              "      <td>1.456031</td>\n",
              "      <td>0.045765</td>\n",
              "      <td>0.792605</td>\n",
              "      <td>1.057132</td>\n",
              "      <td>0.105161</td>\n",
              "      <td>0.231095</td>\n",
              "      <td>0.045116</td>\n",
              "      <td>0.227525</td>\n",
              "      <td>0.056800</td>\n",
              "      <td>1.504068</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Antigua and Barbuda</td>\n",
              "      <td>ATG</td>\n",
              "      <td>2018</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>3.867</td>\n",
              "      <td>0.000</td>\n",
              "      <td>96.133</td>\n",
              "      <td>0.000</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Argentina</td>\n",
              "      <td>ARG</td>\n",
              "      <td>2018</td>\n",
              "      <td>1.572</td>\n",
              "      <td>63.433</td>\n",
              "      <td>22.915</td>\n",
              "      <td>0.077</td>\n",
              "      <td>1.013</td>\n",
              "      <td>5.388</td>\n",
              "      <td>4.626</td>\n",
              "      <td>...</td>\n",
              "      <td>0.672886</td>\n",
              "      <td>0.466399</td>\n",
              "      <td>0.270056</td>\n",
              "      <td>2.929140</td>\n",
              "      <td>0.633437</td>\n",
              "      <td>1.444507</td>\n",
              "      <td>0.614502</td>\n",
              "      <td>1.077294</td>\n",
              "      <td>0.488490</td>\n",
              "      <td>4.994686</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 24 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-84d93a8f-2b01-40d4-b839-be8575619a7b')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-84d93a8f-2b01-40d4-b839-be8575619a7b button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-84d93a8f-2b01-40d4-b839-be8575619a7b');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 44
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "low_income = 995\n",
        "                                                                                            \n",
        "lower_middle_income_most = 3895\n",
        "\n",
        "upper_middle_income_most = 12055"
      ],
      "metadata": {
        "id": "bEJMAfA_D8j0"
      },
      "id": "bEJMAfA_D8j0",
      "execution_count": 45,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "clean_gnp_2018_ghg.loc[clean_gnp_2018_ghg['GNP Per Capita'] <=low_income, 'Income Category'] = \"lower income\"\n",
        "clean_gnp_2018_ghg.loc[((clean_gnp_2018_ghg['GNP Per Capita'] > low_income) & (clean_gnp_2018_ghg['GNP Per Capita'] <= lower_middle_income_most)), 'Income Category'] = \"lower_middle_income\"\n",
        "clean_gnp_2018_ghg.loc[((clean_gnp_2018_ghg['GNP Per Capita'] > lower_middle_income_most) & (clean_gnp_2018_ghg['GNP Per Capita'] < upper_middle_income_most)), 'Income Category'] = \"upper_middle_income\"\n",
        "clean_gnp_2018_ghg.loc[clean_gnp_2018_ghg['GNP Per Capita'] > upper_middle_income_most, 'Income Category'] = \"higher income\"\n",
        "clean_gnp_2018_ghg_final = clean_gnp_2018_ghg.dropna()\n",
        "clean_gnp_2018_ghg_final.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 352
        },
        "id": "VbOxVQHOERsZ",
        "outputId": "2db0d311-dec4-4552-f174-df611d696dc2"
      },
      "id": "VbOxVQHOERsZ",
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Entity Code  Year  Coal (% electricity)  Gas (% electricity)  \\\n",
              "0    Albania  ALB  2018                 0.000                0.000   \n",
              "1    Algeria  DZA  2018                 0.000               98.987   \n",
              "2     Angola  AGO  2018                 0.000               13.146   \n",
              "4  Argentina  ARG  2018                 1.572               63.433   \n",
              "5    Armenia  ARM  2018                 0.000               42.958   \n",
              "\n",
              "   Hydro (% electricity)  Solar (% electricity)  Wind (% electricity)  \\\n",
              "0                100.000                  0.000                 0.000   \n",
              "1                  0.161                  0.837                 0.015   \n",
              "2                 73.994                  0.154                 0.000   \n",
              "4                 22.915                  0.077                 1.013   \n",
              "5                 31.065                  0.257                 0.027   \n",
              "\n",
              "   Oil (% electricity)  Nuclear (% electricity)  ...  \\\n",
              "0                0.000                    0.000  ...   \n",
              "1                0.000                    0.000  ...   \n",
              "2               10.995                    0.000  ...   \n",
              "4                5.388                    4.626  ...   \n",
              "5                0.000                   25.693  ...   \n",
              "\n",
              "   Manufacturing and construction (per capita)  \\\n",
              "0                                     0.423209   \n",
              "1                                     0.301456   \n",
              "2                                     0.045765   \n",
              "4                                     0.466399   \n",
              "5                                     0.155840   \n",
              "\n",
              "   Fugitive emissions (per capita)  Agriculture (per capita)  \\\n",
              "0                         0.000000                  1.030272   \n",
              "1                         0.850849                  0.291747   \n",
              "2                         0.792605                  1.057132   \n",
              "4                         0.270056                  2.929140   \n",
              "5                         0.304905                  0.592870   \n",
              "\n",
              "   Buildings (per capita)  Electricity and heat (per capita)  \\\n",
              "0                0.159571                           0.048565   \n",
              "1                0.623751                           1.149937   \n",
              "2                0.105161                           0.231095   \n",
              "4                0.633437                           1.444507   \n",
              "5                0.396376                           0.508175   \n",
              "\n",
              "   Industry (per capita)  Transport (per capita)  Waste (per capita)  \\\n",
              "0               0.523808                0.763164            0.339955   \n",
              "1               0.411334                1.076526            0.342897   \n",
              "2               0.045116                0.227525            0.056800   \n",
              "4               0.614502                1.077294            0.488490   \n",
              "5               0.125350                0.613197            0.250700   \n",
              "\n",
              "   GHG Emissions per Capita      Income Category  \n",
              "0                  2.258272  upper_middle_income  \n",
              "1                  4.756750  upper_middle_income  \n",
              "2                  1.504068  lower_middle_income  \n",
              "4                  4.994686        higher income  \n",
              "5                  2.354543  upper_middle_income  \n",
              "\n",
              "[5 rows x 25 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-fd2afb6c-123a-4d89-ad2b-1fd4d3e30ae2\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Entity</th>\n",
              "      <th>Code</th>\n",
              "      <th>Year</th>\n",
              "      <th>Coal (% electricity)</th>\n",
              "      <th>Gas (% electricity)</th>\n",
              "      <th>Hydro (% electricity)</th>\n",
              "      <th>Solar (% electricity)</th>\n",
              "      <th>Wind (% electricity)</th>\n",
              "      <th>Oil (% electricity)</th>\n",
              "      <th>Nuclear (% electricity)</th>\n",
              "      <th>...</th>\n",
              "      <th>Manufacturing and construction (per capita)</th>\n",
              "      <th>Fugitive emissions (per capita)</th>\n",
              "      <th>Agriculture (per capita)</th>\n",
              "      <th>Buildings (per capita)</th>\n",
              "      <th>Electricity and heat (per capita)</th>\n",
              "      <th>Industry (per capita)</th>\n",
              "      <th>Transport (per capita)</th>\n",
              "      <th>Waste (per capita)</th>\n",
              "      <th>GHG Emissions per Capita</th>\n",
              "      <th>Income Category</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Albania</td>\n",
              "      <td>ALB</td>\n",
              "      <td>2018</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>100.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>...</td>\n",
              "      <td>0.423209</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.030272</td>\n",
              "      <td>0.159571</td>\n",
              "      <td>0.048565</td>\n",
              "      <td>0.523808</td>\n",
              "      <td>0.763164</td>\n",
              "      <td>0.339955</td>\n",
              "      <td>2.258272</td>\n",
              "      <td>upper_middle_income</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Algeria</td>\n",
              "      <td>DZA</td>\n",
              "      <td>2018</td>\n",
              "      <td>0.000</td>\n",
              "      <td>98.987</td>\n",
              "      <td>0.161</td>\n",
              "      <td>0.837</td>\n",
              "      <td>0.015</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>...</td>\n",
              "      <td>0.301456</td>\n",
              "      <td>0.850849</td>\n",
              "      <td>0.291747</td>\n",
              "      <td>0.623751</td>\n",
              "      <td>1.149937</td>\n",
              "      <td>0.411334</td>\n",
              "      <td>1.076526</td>\n",
              "      <td>0.342897</td>\n",
              "      <td>4.756750</td>\n",
              "      <td>upper_middle_income</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Angola</td>\n",
              "      <td>AGO</td>\n",
              "      <td>2018</td>\n",
              "      <td>0.000</td>\n",
              "      <td>13.146</td>\n",
              "      <td>73.994</td>\n",
              "      <td>0.154</td>\n",
              "      <td>0.000</td>\n",
              "      <td>10.995</td>\n",
              "      <td>0.000</td>\n",
              "      <td>...</td>\n",
              "      <td>0.045765</td>\n",
              "      <td>0.792605</td>\n",
              "      <td>1.057132</td>\n",
              "      <td>0.105161</td>\n",
              "      <td>0.231095</td>\n",
              "      <td>0.045116</td>\n",
              "      <td>0.227525</td>\n",
              "      <td>0.056800</td>\n",
              "      <td>1.504068</td>\n",
              "      <td>lower_middle_income</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Argentina</td>\n",
              "      <td>ARG</td>\n",
              "      <td>2018</td>\n",
              "      <td>1.572</td>\n",
              "      <td>63.433</td>\n",
              "      <td>22.915</td>\n",
              "      <td>0.077</td>\n",
              "      <td>1.013</td>\n",
              "      <td>5.388</td>\n",
              "      <td>4.626</td>\n",
              "      <td>...</td>\n",
              "      <td>0.466399</td>\n",
              "      <td>0.270056</td>\n",
              "      <td>2.929140</td>\n",
              "      <td>0.633437</td>\n",
              "      <td>1.444507</td>\n",
              "      <td>0.614502</td>\n",
              "      <td>1.077294</td>\n",
              "      <td>0.488490</td>\n",
              "      <td>4.994686</td>\n",
              "      <td>higher income</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Armenia</td>\n",
              "      <td>ARM</td>\n",
              "      <td>2018</td>\n",
              "      <td>0.000</td>\n",
              "      <td>42.958</td>\n",
              "      <td>31.065</td>\n",
              "      <td>0.257</td>\n",
              "      <td>0.027</td>\n",
              "      <td>0.000</td>\n",
              "      <td>25.693</td>\n",
              "      <td>...</td>\n",
              "      <td>0.155840</td>\n",
              "      <td>0.304905</td>\n",
              "      <td>0.592870</td>\n",
              "      <td>0.396376</td>\n",
              "      <td>0.508175</td>\n",
              "      <td>0.125350</td>\n",
              "      <td>0.613197</td>\n",
              "      <td>0.250700</td>\n",
              "      <td>2.354543</td>\n",
              "      <td>upper_middle_income</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 25 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fd2afb6c-123a-4d89-ad2b-1fd4d3e30ae2')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-fd2afb6c-123a-4d89-ad2b-1fd4d3e30ae2 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-fd2afb6c-123a-4d89-ad2b-1fd4d3e30ae2');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 46
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "indep_var = [\"GHG Emissions per Capita\"]\n",
        "dep_var = [\"Renewable Energy\"]\n",
        "\n",
        "x = clean_gnp_2018_ghg_final[indep_var]\n",
        "y = clean_gnp_2018_ghg_final[dep_var]\n",
        "\n",
        "lg = LinearRegression()\n",
        "lg.fit(x,y)\n",
        "intercept = lg.intercept_\n",
        "slope = lg.coef_\n",
        "\n",
        "print(intercept)\n",
        "\n",
        "print(slope)"
      ],
      "metadata": {
        "id": "y-JUAm_9Eul3",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c8c82714-b309-4f90-b0af-c848785ca2b4"
      },
      "id": "y-JUAm_9Eul3",
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[52.58160363]\n",
            "[[-2.36552517]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x_col = \"GHG Emissions per Capita\"\n",
        "y_col = \"Renewable Energy\"\n",
        "z_col = \"Code\"\n",
        "\n",
        "fig, ax = plt.subplots(figsize = (8,8))\n",
        "\n",
        "# Group dataframe by species to plot different colors.\n",
        "country_groups = clean_gnp_2018_ghg_final.groupby(\"Income Category\")\n",
        "for name, group in country_groups:\n",
        "  x = group[x_col]\n",
        "  y = group[y_col]\n",
        " \n",
        "  ax.scatter(x,y, label = name)\n",
        "\n",
        "for i in clean_gnp_2018_ghg_final.index:\n",
        "    txt = clean_gnp_2018_ghg_final.loc[i,\"Code\"]\n",
        "    x_coord = clean_gnp_2018_ghg_final.loc[i,\"GHG Emissions per Capita\"]\n",
        "    y_coord = clean_gnp_2018_ghg_final.loc[i,\"Renewable Energy\"]\n",
        "    if x_coord > 12 or y_coord > 80:\n",
        "        ax.annotate(txt, (x_coord+0.5,y_coord+0.5))\n",
        "     \n",
        "  \n",
        "ax.set_xlabel(\"GHG Emissions per Capita (measured in tCO2e)\")\n",
        "ax.set_ylabel(\"% Renewable Energy in Electricity Mix\")\n",
        "\n",
        "ax.set_title(\"GHG Emissions per Capita v/s Renewable Energy Penetration in Countries by Income Category - 2018\")\n",
        "\n",
        "x_reg = np.linspace(0,20)\n",
        "y_reg = slope[0] * x_reg + intercept[0]\n",
        "ax.plot(x_reg, y_reg, label = \"linear regression\")\n",
        "\n",
        "handles, labels = ax.get_legend_handles_labels()\n",
        "by_label = OrderedDict(zip(labels, handles))\n",
        "\n",
        "ordered_label_list = ['lower income', 'lower_middle_income', 'upper_middle_income','higher income','linear regression']\n",
        "ordered_label_values = [by_label[k] for k in ordered_label_list]\n",
        "\n",
        "ax.legend(ordered_label_values, ordered_label_list)\n",
        "\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 513
        },
        "id": "k-_lvz4MFQfD",
        "outputId": "bae84d8e-36f1-4556-bdff-96f487969af2"
      },
      "id": "k-_lvz4MFQfD",
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 576x576 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.10"
    },
    "colab": {
      "name": "Data Science Project_Nakul.ipynb",
      "provenance": [],
      "collapsed_sections": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}
